;------------------------------------------------------------------------
;                                                                       |
;   FILE        :ASC3100_023.src                                        |
;   DATE        :Wed, Mar 25, 2009                                      |
;   DESCRIPTION :Main Program                                           |
;   CPU TYPE    :H8/36064                                               |
;                                                                       |
;   This file is generated by Renesas Project Generator (Ver.4.13).     |
;                                                                       |
;------------------------------------------------------------------------
;eep強制書込
;------------------------------------------------------------------------
;                                                                       |
;   FILE        :ASC3100_022.src                                        |
;   DATE        :Fri, Feb 06, 2009                                      |
;   DESCRIPTION :Main Program                                           |
;   CPU TYPE    :H8/36064                                               |
;                                                                       |
;   This file is generated by Renesas Project Generator (Ver.4.13).     |
;                                                                       |
;------------------------------------------------------------------------
;参加許可前(Y)のＥＮＱ返信の禁止
;
;------------------------------------------------------------------------
;                                                                       |
;   FILE        :ASC3100_02.src                                         |
;   DATE        :Wed, Dec 10, 2008                                      |
;   DESCRIPTION :Main Program                                           |
;   CPU TYPE    :H8/36064                                               |
;                                                                       |
;   This file is generated by Renesas Project Generator (Ver.4.8).      |
;                                                                       |
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;                                                                       |
;   FILE        :ASC3100_01.src                                         |
;   DATE        :Fri, Nov 07, 2008                                      |
;   DESCRIPTION :Main Program                                           |
;   CPU TYPE    :H8/36064                                               |
;                                                                       |
;   This file is generated by Renesas Project Generator (Ver.4.8).      |
;                                                                       |
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;                                                                       |
;   FILE        :ASC3100_01.src                                         |
;   DATE        :Wed, Jul 23, 2008                                      |
;   DESCRIPTION :Main Program                                           |
;   CPU TYPE    :H8/36064                                               |
;                                                                       |
;   This file is generated by Renesas Project Generator (Ver.4.9).      |
;                                                                       |
;------------------------------------------------------------------------
;************************************************************************
;       アセンブラシステム定義                                          *
;************************************************************************
;
;                .CPU    300HN                   ;CPU=H8/3664
                .PRINT  LIST                    ;
;************************************************************************
;       システム定義                                                    *
;************************************************************************
;
PULSE00         .EQU    D'27675         ;15mSEC (0.542u * 27675)
PULSE01         .EQU    D'22140         ;READ 12mSEC (0.542u * 22140)
PULSE02         .EQU    D'13838			;7.5mSEC(0.542u * 13838)
PULSE03         .EQU    D'3228          ;1.75mSEC(0.542u * 3228)0/1判定ﾊﾟﾙｽ幅
;************************************************************************
;       システム定義                                                    *
;************************************************************************
;                       -----< REGISTER(BYTE) SYMBOL DEFINE >---------
;
AH              .REG    (R0H)       ;AH  <= R0H
AL              .REG    (R0L)       ;AL  <= R0L
BH              .REG    (R1H)       ;BH  <= R1H
BL              .REG    (R1L)       ;BL  <= R1L
CH              .REG    (R2H)       ;CL  <= R2H
CL              .REG    (R2L)       ;CH  <= R2L
DH              .REG    (R3H)       ;DH  <= R3H
DL              .REG    (R3L)       ;DL  <= R3L
EH              .REG    (R4H)       ;EH  <= R4L
EL              .REG    (R4L)       ;EL  <= R4H
IXH             .REG    (R5H)       ;IXH <= R5H
IXL             .REG    (R5L)       ;IXL <= R5L
IYH             .REG    (R6H)       ;IYH <= R6H
IYL             .REG    (R6L)       ;IYL <= R6L
;
;                       -----< REGISTER(WORD) SYMBOL DEFINE >---------
AX              .REG    (R0)        ;AX <= R0
BX              .REG    (R1)        ;BX <= R1
CX              .REG    (R2)        ;CX <= R2
DX              .REG    (R3)        ;DX <= R3
EX              .REG    (R4)        ;EX <= R4
IX              .REG    (R5)        ;IX <= R5
IY              .REG    (R6)        ;IY <= R6
;
;                       -----< STACK POINTER ADDRESS >----------------
SPOINT:         .EQU    H'FF7F		;ｽﾀｯｸﾎﾟｲﾝﾀ OREGNAL FF7F
;                       -----< ROM/RAM ADDRESS >----------------------
RAM_TOP_ADR:    .EQU    H'F780      ;RAMﾄｯﾌﾟｱﾄﾞﾚｽ
RAM_END_ADR:    .EQU    SPOINT      ;RAMｴﾝﾄﾞｱﾄﾞﾚｽ
;
;                       -----< I/O REGISTER ADDRESS >-----------------
;
TCR_0:		.EQU	H'F700			;タイマコントロールレジスタ_0
TIORA_0:	.EQU	H'F701 			;タイマI/O コントロールレジスタA_0
TIORC_0:	.EQU	H'F702			;タイマI/O コントロールレジスタC_0
TSR_0:		.EQU	H'F703			;タイマステータスレジスタ_0
TIER_0:		.EQU	H'F704			;タイマインタラプトイネーブルレジスタ_0
POCR_0:		.EQU	H'F705			;アウトプットレベルコントロールレジスタ_0
TCNT_0:		.EQU	H'F706			;タイマカウンタ_0
GRA_0:		.EQU	H'F708			;ジェネラルレジスタA_0
GRB_0:		.EQU	H'F70A			;ジェネラルレジスタB_0
GRC_0:		.EQU	H'F70C			;ジェネラルレジスタC_0
GRD_0:		.EQU	H'F70E			;ジェネラルレジスタD_0
TCR_1:		.EQU	H'F710			;タイマコントロールレジスタ_1
TIORA_1:	.EQU	H'F711			;タイマI/O コントロールレジスタA_1
TIORC_1:	.EQU	H'F712			;タイマI/O コントロールレジスタC_1
TSR_1:		.EQU	H'F713			;タイマステータスレジスタ_1
TIER_1:		.EQU	H'F714			;タイマインタラプトイネーブルレジスタ_1
POCR_1:		.EQU	H'F715			;アウトプットレベルコントロールレジスタ_1
TCNT_1:		.EQU	H'F716			;タイマカウンタ_1
GRA_1:		.EQU	H'F718			;ジェネラルレジスタA_1
GRB_1:		.EQU	H'F71A			;ジェネラルレジスタB_1
GRC_1:		.EQU	H'F71C			;ジェネラルレジスタC_1
GRD_1:		.EQU	H'F71E			;ジェネラルレジスタD_1
TSTR:		.EQU	H'F720			;タイマスタートレジスタ
TMDR:		.EQU	H'F721			;タイマモードレジスタ
TPMR:		.EQU	H'F722			;タイマPWM モードレジスタ
TFCR:		.EQU	H'F723			;タイマファンクションコントロールレジスタ
TOER:		.EQU	H'F724			;タイマアウトプットマスタイネーブルレジスタ
TOCR:		.EQU	H'F725			;タイマアウトプットコントロールレジスタ
LVDCR:		.EQU	H'F730			;低電圧検出コントロールレジスタ
LVDSR:		.EQU	H'F731			;低電圧検出ステータスレジスタ
SMR_2:		.EQU	H'F740			;シリアルモードレジスタ_2
BRR_2:		.EQU	H'F741			;ビットレートレジスタ_2
SCR3_2:		.EQU	H'F742			;シリアルコントロールレジスタ3_2
TDR_2:		.EQU	H'F743			;トランスミットデータレジスタ_2
SSR_2:		.EQU	H'F744			;シリアルステータスレジスタ_2
RDR_2:		.EQU	H'F745			;レシーブデータレジスタ_2
ICCR1:		.EQU	H'F748			;I2C バスコントロールレジスタ1
ICCR2:		.EQU	H'F749			;I2C バスコントロールレジスタ2
ICMR:		.EQU	H'F74A			;I2C バスモードレジスタ
ICIER:		.EQU	H'F74B			;I2C バスインタラプトイネーブルレジスタ
ICSR:		.EQU	H'F74C			;I2C バスステータスレジスタ
SAR:		.EQU	H'F74D			;スレーブアドレスレジスタ
ICDRT:		.EQU	H'F74E			;I2C バス送信データレジスタ
ICDRR:		.EQU	H'F74F			;I2C バス受信データレジスタ
TMB1:		.EQU	H'F760			;タイマモードレジスタB1
TCB1:		.EQU	H'F761			;タイマカウンタB1
TLB1:		.EQU	H'F761			;タイマロードレジスタB1
FLMCR1:		.EQU	H'FF90			;フラッシュメモリコントロールレジスタ1
FLMCR2:		.EQU	H'FF91			;フラッシュメモリコントロールレジスタ2
EBR1:		.EQU	H'FF93			;ブロック指定レジスタ1
FENR:		.EQU	H'FF9B			;フラッシュメモリイネーブルレジスタ
TCRV0:		.EQU	H'FFA0			;タイマコントロールレジスタV0
TCSRV:		.EQU	H'FFA1			;タイマコントロール／ステータスレジスタV
TCORA:		.EQU	H'FFA2			;タイムコンスタントレジスタA
TCORB:		.EQU	H'FFA3			;タイムコンスタントレジスタB
TCNTV:		.EQU	H'FFA4			;タイマカウンタV
TCRV1:		.EQU	H'FFA5			;タイマコントロールレジスタV1
SMR:		.EQU	H'FFA8			;シリアルモードレジスタ
BRR:		.EQU	H'FFA9			;ビットレートレジスタ
SCR3:		.EQU	H'FFAA			;シリアルコントロールレジスタ3
TDR:		.EQU	H'FFAB			;トランスミットデータレジスタ
SSR:		.EQU	H'FFAC			;シリアルステータスレジスタ
RDR:		.EQU	H'FFAD			;レシーブデータレジスタ
ADDRA:		.EQU	H'FFB0			;A/D データレジスタA
ADDRB:		.EQU	H'FFB2			;A/D データレジスタB
ADDRC:		.EQU	H'FFB4			;A/D データレジスタC
ADDRD:		.EQU	H'FFB6			;A/D データレジスタD
ADCSR:		.EQU	H'FFB8			;A/D コントロール／ステータスレジスタ
ADCR:		.EQU	H'FFB9			;A/D コントロールレジスタ
PWDRL:		.EQU	H'FFBC			;PWM データレジスタL
PWDRU:		.EQU	H'FFBD			;PWM データレジスタU
PWCR:		.EQU	H'FFBE			;PWM コントロールレジスタ
TCSRWD:		.EQU	H'FFC0			;タイマコントロール／ステータスレジスタWD
TCWD:		.EQU	H'FFC1			;タイマカウンタWD
TMWD:		.EQU	H'FFC2			;タイマモードレジスタWD
ABRKCR:		.EQU	H'FFC8			;アドレスブレークコントロールレジスタ
ABRKSR:		.EQU	H'FFC9			;アドレスブレークステータスレジスタ
BARH:		.EQU	H'FFCA			;ブレークアドレスレジスタH
BARL:		.EQU	H'FFCB			;ブレークアドレスレジスタL
BDRH:		.EQU	H'FFCC			;ブレークデータレジスタH
BDRL:		.EQU	H'FFCD			;ブレークデータレジスタL
PUCR1:		.EQU	H'FFD0			;ポートプルアップコントロールレジスタ1
PUCR5:		.EQU	H'FFD1			;ポートプルアップコントロールレジスタ5

PDR1:		.EQU	H'FFD4			;ポートデータレジスタ1
PDR2:		.EQU	H'FFD5			;ポートデータレジスタ2
PDR3:		.EQU	H'FFD6			;ポートデータレジスタ3
PDR5:		.EQU	H'FFD8			;ポートデータレジスタ5
PDR6:		.EQU	H'FFD9			;ポートデータレジスタ6
PDR7:		.EQU	H'FFDA			;ポートデータレジスタ7
PDR8:		.EQU	H'FFDB			;ポートデータレジスタ8
PDRB:		.EQU	H'FFDD			;ポートデータレジスタB

PMR1:		.EQU	H'FFE0			;ポートモードレジスタ1
PMR5:		.EQU	H'FFE1			;ポートモードレジスタ5
PMR3:		.EQU	H'FFE2			;ポートモードレジスタ3

PCR1:		.EQU	H'FFE4			;ポートコントロールレジスタ1
PCR2:		.EQU	H'FFE5			;ポートコントロールレジスタ2
PCR3:		.EQU	H'FFE6			;ポートコントロールレジスタ3
PCR5:		.EQU	H'FFE8			;ポートコントロールレジスタ5
PCR6:		.EQU	H'FFE9			;ポートコントロールレジスタ6
PCR7:		.EQU	H'FFEA			;ポートコントロールレジスタ7
PCR8:		.EQU	H'FFEB			;ポートコントロールレジスタ

SYSCR1:		.EQU	H'FFF0			;システムコントロールレジスタ1
SYSCR2:		.EQU	H'FFF1			;システムコントロールレジスタ2
IEGR1:		.EQU	H'FFF2			;割り込みエッジセレクトレジスタ1
IEGR2:		.EQU	H'FFF3			;割り込みエッジセレクトレジスタ2
IENR1:		.EQU	H'FFF4			;割り込みイネーブルレジスタ1 
IENR2:		.EQU	H'FFF5			;割り込みイネーブルレジスタ2 
IRR1:		.EQU	H'FFF6			;割り込みフラグレジスタ1 
IRR2:		.EQU	H'FFF7			;割り込みフラグレジスタ2 
IWPR:		.EQU	H'FFF8			;ウェイクアップ割り込みフラグレジスタ 
MSTCR1:		.EQU	H'FFF9			;モジュールスタンバイコントロールレジスタ1 
MSTCR2:		.EQU	H'FFFA			;モジュールスタンバイコントロールレジスタ2 
;
;*********************************************************************
;       マクロ定義
;*********************************************************************
;
        .MACRO  EI
                ANDC    #H'7F:8,CCR
        .ENDM
;                       -----< DISABLE INTERRUPT >--------------------
        .MACRO  DI
                ORC     #H'80:8,CCR
        .ENDM
;                       -----< SET CARRY >----------------------------
        .MACRO  SCF
                ORC     #H'01:8,CCR
        .ENDM
;                       -----< CLEAR CARRY >--------------------------
        .MACRO  CCF
                ANDC    #H'FE:8,CCR
        .ENDM
;                       -----< EXCHANGE REGISTER(WORD) >--------------
        .MACRO  EX      REG1,REG2
                STC     CCR,EH
                PUSH    \REG1
                PUSH    \REG2
                POP     \REG1
                POP     \REG2
                LDC     EH,CCR
        .ENDM
;                       -----< EXCHANGE REGISTER(WORD) >--------------
        .MACRO  DJNZ            REG1,LABEL1
                DEC.W           #1,\REG1
                BNE             \LABEL1
        .ENDM
;
;
        .MACRO  RETZ
                BNE		$+4
				RTS
        .ENDM
;
        .MACRO  RETNZ
                BEQ		$+4
				RTS
        .ENDM
;
        .MACRO  CS_ON
                BSET    #2,@PDR6
		.ENDM
;
        .MACRO  CS_OFF
                BCLR    #2,@PDR6
		.ENDM
;
;
        .MACRO  PH_ON
				;;BCLR	#5,@PDR7				;PHO_ON(一次試作基板)
				BCLR	#4,@PDR7				;PH0_ON(二次試作基板)
		.ENDM
;
        .MACRO  PH_OFF
				;;BSET	#5,@PDR7				;PHO_OFF(一次試作基板)
				BSET	#4,@PDR7				;PH0_OFF(二次試作基板)
		.ENDM
;
		.MACRO	WINDOW_OFF						;P20 OUT
				BSET	#0,@PDR2				;"H"で禁止
		.ENDM
;
		.MACRO	WINDOW_ON
				BCLR	#0,@PDR2				;"L"で許可
		.ENDM
;			
;*********************************************************************
;       割り込みベクターアドレス設定
;*********************************************************************
        .SECTION        INTER_TABLE,CODE,LOCATE=H'0000
;
        .DATA.W         INTER_RESET             ;0      RESET
;               -----< H'0002~H'0005 CPU RESERVE >----
;
        .ORG    H'000E
;
        .DATA.W         INTER_NMI               ;7      NMI
        .DATA.W         INTER_TRAP0             ;8      TRAP #0
        .DATA.W         INTER_TRAP1             ;9      TRAP #1
        .DATA.W         INTER_TRAP2             ;10     TRAP #2
        .DATA.W         INTER_TRAP3             ;11     TRAP #3
        .DATA.W         INTER_ADBRK             ;12     Address break
        .DATA.W         INTER_SLEEP             ;13     SLEEP
        .DATA.W         INTER_IRQ0              ;14     IRQ0
        .DATA.W         INTER_IRQ1              ;15     IRQ1
        .DATA.W         INTER_IRQ2              ;16     IRQ2
        .DATA.W         INTER_IRQ3              ;17     IRQ3
        .DATA.W         INTER_WKP               ;18     WKP
		.DATA.W			INTER_RESERVE19
		.DATA.W			INTER_RESERVE20
		.DATA.W			INTER_RESERVE21
		;
        .DATA.W         INTER_TIMERV            ;22     TimerV
        .DATA.W         INTER_SCI3				;23     
        .DATA.W         INTER_IIC2				;24
        .DATA.W         INTER_ADI				;25
		;
        .DATA.W         INTER_TIMERZ0			;26
        .DATA.W         INTER_TIMERZ1			;27
		.DATA.W			INTER_RESERVE28			;28
		.DATA.W			INTER_TIMERB1			;29
		.DATA.W			INTER_RESERVE30			;30
		.DATA.W			INTER_RESERVE31			;31
        .DATA.W         INTER_SCI3_2            ;32
		;
;******************************************************************************
;*      00-NAME :INTER_DUMMY
;*      処理概要:割り込みﾀﾞﾐｰ処理を行う
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
                .SECTION        P,CODE,LOCATE=H'0800
;
INTER_NMI:              RTE
INTER_TRAP0:            RTE
INTER_TRAP1:            RTE
INTER_TRAP2:            RTE
INTER_TRAP3:            RTE
INTER_ADBRK:            RTE
INTER_SLEEP:            RTE
INTER_IRQ0:             RTE
INTER_IRQ1:             RTE
INTER_IRQ2:             RTE
INTER_IRQ3:             RTE
INTER_WKP:              RTE
INTER_RESERVE19:		RTE
INTER_RESERVE20:		RTE
INTER_RESERVE21:		RTE
;
INTER_TIMERV            RTE
;;INTER_SCI3				RTE    
INTER_IIC2				RTE
INTER_ADI				RTE
;
;;INTER_TIMERZ0			RTE
INTER_TIMERZ1			RTE
INTER_RESERVE28			RTE
;;INTER_TIMERB1			RTE
INTER_RESERVE30			RTE
INTER_RESERVE31			RTE
;;INTER_SCI3_2            RTE
;
;******************************************************************************
;*      00-NAME :INTER_TIMERZ0
;*      処理概要 :
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
INTER_TIMERZ0:		.EQU	$
					PUSH.W	AX
					PUSH.W	BX
					PUSH.W	CX
					PUSH.W	DX
					PUSH.W	EX
					;
                	MOV.B   @TSR_0,AL			;ﾀｲﾏｺﾝﾄﾛｰﾙ/ｽﾃｰﾀｽﾚｼﾞｽﾀﾘｰﾄﾞ
                	BTST    #0,AL				;IMFA ｲﾝﾌﾟｯﾄｷｬﾌﾟﾁｬﾌﾗｸﾞﾁｪｯｸ
                	BEQ     INTER_TIMERZ99
                	;
				   	JSR     @REM_REC00
					;
                	MOV.B   @TSR_0,AL			;ﾀｲﾏｺﾝﾄﾛｰﾙ/ｽﾃｰﾀｽﾚｼﾞｽﾀﾘｰﾄﾞ
                	AND     #B'11111110,AL		;IMFA FLG CLR
					MOV.B   AL,@TSR_0
                	;
INTER_TIMERZ99: 	POP.W	EX
					POP.W	DX
					POP.W	CX
					POP.W	BX
                	POP.W	AX
                	RTE
;******************************************************************************
;*      00-NAME :INTER_SCI3
;*      処理概要 :
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
INTER_SCI3:			.EQU	$
                	PUSH    AX
					PUSH	BX
					;
					MOV.B	@SSR,AL
					BTST	#5,AL				;OER　オーバーラン 
					BNE		INTER_SCI3_ERR
					BTST	#4,AL				;FER　フレーミング
					BNE		INTER_SCI3_ERR
					BTST	#3,AL				;PER　パリティ
					BNE		INTER_SCI3_ERR
					;
                	BTST    #6,AL				;ﾚｼｰﾌﾞﾃﾞｰﾀﾌﾙ ?
                	BEQ     INTER_SCI3_04	    ;EXIT
					;
					MOV.B	@RDR,AL				;RXD_DATA
INTER_SCI3_03:  	JSR     @WR_BUFFER00		;受信割込各処理へ
					;
					JSR		@ETX_CHK00
					;JSR		@LIFE_COUNT10
					MOV.B	#D'02,AL
					MOV.B	AL,@TIMV
					;JSR		@BUFF_COUNT00
					;
				  	;MOV.B	@SSR,AL			;ﾀﾞﾐｰﾘｰﾄﾞ
                	;BCLR    #6,AL
					;MOV.B	AL,@SSR			;ﾚｼｰﾌﾞﾃﾞｰﾀﾌﾙﾌﾗｸﾞｸﾘｱ
					;
INTER_SCI3_04:	 	POP		BX
					POP     AX
                	RTE
;******************************************************************************
;*      00-NAME :ERR
;*      処理概要 :
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
INTER_SCI3_ERR:		BCLR	#5,AL
					BCLR	#4,AL
					BCLR	#3,AL
					;
					MOV.B	AL,@SSR
					POP		BX
					POP		AX
					RTE	
;******************************************************************************
;*      00-NAME :INTER_SCI3
;*      処理概要 :
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
INTER_SCI3_2:		.EQU	$
                	PUSH    AX
					PUSH	BX
					;
					MOV.B	@SSR_2,AL
					BTST	#5,AL				;OER　オーバーラン 
					BNE		INTER_SCI32_ERR
					BTST	#4,AL				;FER　フレーミング
					BNE		INTER_SCI32_ERR
					BTST	#3,AL				;PER　パリティ
					BNE		INTER_SCI32_ERR
					;
                	BTST    #6,AL				;ﾚｼｰﾌﾞﾃﾞｰﾀﾌﾙ ?
                	BEQ     INTER_SCI32_04	    ;EXIT
					;
					MOV.B	@RDR_2,AL			;RXD_DATA
					JSR		@STX_CHK00
					JSR		@ENQ_CHK00
					JSR     @WR_BUFFER00		;受信割込各処理へ
					;
					JSR		@ETX_CHK01
					JSR		@BUFF_COUNT00
					JSR		@LIFE_COUNT00					
					;
INTER_SCI32_04:  	;MOV.B	@SSR_2,AL			;ﾀﾞﾐｰﾘｰﾄﾞ
                	;BCLR    #6,AL
					;MOV.B	AL,@SSR_2			;ﾚｼｰﾌﾞﾃﾞｰﾀﾌﾙﾌﾗｸﾞｸﾘｱ
					;
				 	POP		BX
					POP     AX
                	RTE
;******************************************************************************
;*      00-NAME :ERR
;*      処理概要 :
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
INTER_SCI32_ERR:	BCLR	#5,AL
					BCLR	#4,AL
					BCLR	#3,AL
					;
					MOV.B	AL,@SSR_2
					POP		BX
					POP		AX
					RTE	
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
INTER_TIMERB1:   	.EQU    $						;12.5mSEC
                	PUSH    AX
					PUSH	BX
					PUSH	CX
					PUSH	DX
					;
					MOV.B	#H'01,AL
					MOV.B	AL,@READ_FLG
					;
					MOV.B	@PRISCALER,AL
					INC.B	AL
					AND.B	#B'00011111,AL
					MOV.B	AL,@PRISCALER
					BNE		INTER_TIMERB99
					;
					MOV.B	@FREE_RUN,AL
					INC.B	AL
					MOV.B	AL,@FREE_RUN			;
					JSR		@COUNT400_00			;12.5m * 32 = 400mSEC
					JSR		@COUNT400_01	
					;
INTER_TIMERB99: 	JSR		@OUTPUT_SCAN00
					JSR		@ROCK_OPEN00
					JSR		@ROCK_CLOSE00
					JSR		@TIMV_CHK00
					;
					MOV.B   @IRR2,AL
                	AND.B   #B'11011111,AL
                	MOV.B   AL,@IRR2
					;
					POP		DX
					POP		CX
					POP		BX
                	POP     AX
     				RTE
;******************************************************************************
;*      00-NAME :SYSTEM_INIT
;*      処理概要:ｼｽﾃﾑｺﾝﾄﾛｰﾙ/IRQｲﾈｰﾌﾞﾙﾚｼﾞｽﾀの初期化
;*      ENTRY   :NOTHING
;*      RETURN  :NOTHING
;******************************************************************************
;
SYSTEM_INIT:    .EQU    $
                ;
                MOV.B   #H'00:8,AL
                MOV.B   AL,@SYSCR1:8            ;ｼｽﾃﾑｺﾝﾄﾛｰﾙﾚｼﾞｽﾀ1
                MOV.B   #B'00000000:8,AL
                MOV.B   AL,@SYSCR2:8            ;ｼｽﾃﾑｺﾝﾄﾛｰﾙﾚｼﾞｽﾀ2
				;
                MOV.B   #B'01001000:8,AL        ;*,IIC,SCI3,AD,WDT,*,TIMEV,*                    
                MOV.B   AL,@MSTCR1:8            ;
                MOV.B   #B'00000000:8,AL        ;SCI3_2,*,*,TIMEB1,*,*,TIMEZ,PWM                    
                MOV.B   AL,@MSTCR2:8            ;				
                RTS
;******************************************************************************
;*      00-NAME :PORT_INIT
;*      処理概要:ﾊﾟﾗﾚﾙI/Oﾎﾟｰﾄの初期設定
;*      ENTRY   :NOTHING
;*      RETURN  :NOTHING
;******************************************************************************
;
PORT_INIT:      .EQU    $
                MOV.B   #B'00000010,AL          ;IRQ3,2,1,0,TXD2,PWM,TXD,*
                MOV.B   AL,@PMR1                ;"0" I/O
				;P12	RESET(OUT)
				;P17	SNMP_OUT
				;
                MOV.B   #B'00000100,AL
				MOV.B   AL,@PCR1				;b2=RESET
                MOV.B   #B'00000000,AL          ;
                MOV.B   AL,@PDR1				;
				MOV.B   #B'10000000,AL        	;P17 PULL UP"ON"
                MOV.B   AL,@PUCR1				;
				;
                ;P20	WINDOW SIZE(OUT)
				;P23	IPS_RTS(IN)
				;P24	IPS_WRITE_LED
				;
                MOV.B   #B'00000101,AL          ;P21=RXD P22=TXD
                MOV.B   AL,@PCR2				;
                MOV.B   #B'00000000,AL          ;b3(P23)=CMS b4(P24)=CMOS
                MOV.B   AL,@PMR3
				;
				MOV.B	#B'00000000,AL
				MOV.B	AL,@PDR2
                ;
				;DATA8〜DATA15
				;OUT DATA
				;
				MOV.B   #B'11111111,AL          ;P3 出力ポートに設定
                MOV.B   AL,@PCR3
				;
				;P50	CS1
				;P51	CS2
				;P52	CS3
				;P53	CS4
				;P54	CS5
				;
				;P55	EECS(OUT)
				;P56	EEDO(IN)
				;
                MOV.B   #B'00000000,AL          ;P5を汎用入出力ポートに設定
                MOV.B   AL,@PMR5
                MOV.B   #B'00011111,AL          ;P5 0-4 出力ポートに設定
                MOV.B   AL,@PCR5
                MOV.B   #B'00000000,AL          ;ALL PULL UP OFF
                MOV.B   AL,@PUCR5
                MOV.B   #B'11111111,AL          ;P5=ALL"1"OUT
                MOV.B   AL,@PDR5
                ;
				;P60	REM  (IN)
				;P62	SCONF(OUT)
				;P63	CONF (IN)
				;P64-P67	DIP2
				;
				MOV.B   #B'00000100,AL          ;P6 b0 FTIOA0 REMCON INPUT
                MOV.B   AL,@PCR6				;b4-b7 DIP SW2
                MOV.B   #B'00000000,AL
                MOV.B   AL,@PDR6
				;
				;P70	RS485 TX ENABLE
				;P71	RS485 RXD
				;P74	PH_SW	"0"OFF "1"ON
				;
				;P75	EESK(OUT)
				;P76	EEDI(OUT)
				;
                MOV.B   #B'00010101,AL
                MOV.B   AL,@PCR7
                MOV.B   #B'00000000,AL
                MOV.B   AL,@PDR7
				;
				;
                MOV.B   #B'00000000,AL          ;P8 000-----入力ポートに設定
                MOV.B   AL,@PCR8
                MOV.B   #B'00000000,AL
                MOV.B   AL,@PDR8
                RTS
;************************************************************************
;*      00-NAME :AD_INIT
;*      処理概要:16ﾋﾞｯﾄﾌﾘｰﾗﾝﾆﾝｸﾞﾀｲﾏｰの初期設定
;*      ENTRY   :NOTHING
;*      RETURN  :NOTHING
;************************************************************************
;
AD_INIT00:		MOV.B	#B'00000000,AL
				MOV.B	AL,@ADCSR
				RTS
				;
AD_INIT07:		MOV.B	#B'00000001,AL
				MOV.B	AL,@ADCSR
				RTS
;************************************************************************
;*      00-NAME :TIMERB1_INIT
;*      処理概要:各8ﾋﾞｯﾄｶｳﾝﾀ/ﾀｲﾏｰの初期設定
;*      ENTRY   :NOTHING
;*      RETURN  :NOTHING
;************************************************************************
;
TIMERB1_INIT:	.EQU    $
                MOV.B   #B'10000001,AL
                MOV.B   AL,@TMB1            ;auto,*,*,*,*,0,0,0(PSS=/2048)
                MOV.B   #D'166,AL           ;1/14.7456M*2048*90=12.5mSEC
				MOV.B	AL,@TLB1
				RTS
;************************************************************************
;*      00-NAME :TIMERB1_INIT
;*      処理概要:各16ﾋﾞｯﾄｶｳﾝﾀ/ﾀｲﾏｰの初期設定
;*      ENTRY   :NOTHING
;*      RETURN  :NOTHING
;************************************************************************
;
TIMERZ0_INIT:	.EQU    $
				MOV.B	#B'00101011,AL		;001,01,011
				MOV.B	AL,@TCR_0			;TCNT CLR,↑EDGE,φ/8=1/14M*8=0.542uSEC
				;
				MOV.B	#B'10001100,AL		;1,000,1,100
				MOV.B	AL,@TIORA_0			;1,GRB,1,GRA ↑EDGE
				;
				MOV.B	#B'10001000,AL
				MOV.B	AL,@TIORC_0
				;
                MOV.B   #B'11100001,AL		;1,1,1,OVIE,IMID,IMIC,IMIB,IMIA
                MOV.B   AL,@TIER_0
				;
                MOV.B   #B'00001110,AL		;BFD1,BFC1,BFD0,BFC0"EN",1,1,1,SYNC
                MOV.B   AL,@TMDR
				;
                MOV.B   #B'11111101,AL		;1,1,1,1,1,1,STR1,STR0
                MOV.B   AL,@TSTR
				RTS
;******************************************************************************
;*      00-NAME :IIC_INIT
;*      処理概要 :IICﾎﾟｰﾄの初期設定
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
IRQ_INIT:		.EQU    $
				MOV.B   #B'00100000,AL		;*,*,TIMERB1,*,*,*,*,*
				MOV.B   AL,@IENR2			;TIMER"B1"ENABLE
				RTS
;******************************************************************************
;*      00-NAME :SERIAL_INIT
;*      処理概要:各ｼﾘｱﾙﾎﾟｰﾄの初期設定
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
SERIAL_INIT:    .EQU    $
;               -------< CH.0 >--------
                MOV.B   #B'00000000,AL
                MOV.B   AL,@SCR3				;ｼﾘｱﾙｺﾝﾄﾛｰﾙﾚｼﾞｽﾀ1
                                                ;TIE    :disable
                                                ;RIE    :disable
                                                ;TE     :disable
                                                ;RE     :disable
                                                ;MPIE   :disable
                                                ;TEIE   :disable
                                                ;CKE1   :int CLOCK
                                                ;CKE0   :

                MOV.B   #B'00100000,AL
                MOV.B   AL,@SMR					;ｼﾘｱﾙﾓｰﾄﾞﾚｼﾞｽﾀ0
                                                ;C/A    :ansynchronous
                                                ;CHR    :8bit
                                                ;PE     :enable
                                                ;O/E    :even
                                                ;STOP   :1bit
                                                ;MP     :1/1
                                                ;CKS1   :
                                                ;CKS0   :
                MOV.B   #D'23,AL                ;19200BPS N=23 at14.7456MHz
                MOV.B   AL,@BRR
				;
				JSR	@TIME_BIT00					;1bit WAIT
				MOV.B	@SCR3,AL
				OR.B	#B'00110000,AL			;TE RE enable
				MOV.B	AL,@SCR3
				;
				;
				;
                MOV.B   #B'00000000,AL
                MOV.B   AL,@SCR3_2				;ｼﾘｱﾙｺﾝﾄﾛｰﾙﾚｼﾞｽﾀ2
                                                ;TIE    :disable
                                                ;RIE    :disable
                                                ;TE     :disable
                                                ;RE     :disable
                                                ;MPIE   :disable
                                                ;TEIE   :disable
                                                ;CKE1   :int CLOCK
                                                ;CKE0   :

                MOV.B   #B'00100000,AL
                MOV.B   AL,@SMR_2				;ｼﾘｱﾙﾓｰﾄﾞﾚｼﾞｽﾀ0
                                                ;C/A    :ansynchronous
                                                ;CHR    :8bit
                                                ;PE     :enable
                                                ;O/E    :even
                                                ;STOP   :1bit
                                                ;MP     :1/1
                                                ;CKS1   :
                                                ;CKS0   :
                MOV.B   #D'23,AL                ;19200BPS N=23 at14.7456MHz
                MOV.B   AL,@BRR_2
				JSR	@TIME_BIT00					;1bit WAIT	
                RTS
				;
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
RXD_ENABLE00:	MOV.B   #B'00000000,AL
                MOV.B   AL,@SCR3				;ｼﾘｱﾙｺﾝﾄﾛｰﾙﾚｼﾞｽﾀ1
                MOV.B   #B'00000000,AL
                MOV.B   AL,@SMR					;ｼﾘｱﾙﾓｰﾄﾞﾚｼﾞｽﾀ0
                MOV.B   #D'47,AL                ;9600BPS N=47 at14.7456MHz
                MOV.B   AL,@BRR
				JSR		@TIME_BIT00				;1bit WAIT
				JSR		@TIME_BIT00
				JSR		@TIME_BIT00
				MOV.B	@SCR3,AL				;LAN
				OR.B	#B'01110000,AL			;RIE enable
				MOV.B	AL,@SCR3
				RTS
				;
RXD_ENABLE01:	MOV.B	@SCR3_2,AL				;EIA485
				OR.B	#B'01010000,AL			;RIE,RE enable
				MOV.B	AL,@SCR3_2
				RTS								
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;				
RESET_INIT:		MOV.B	@LVDCR,AL
				BSET	#7,AL
				MOV.B	AL,@LVDCR
				;
				JSR		@ADJST00
				;
				MOV.B	@LVDSR,AL
				BCLR	#0,AL
				MOV.B	AL,@LVDSR
				BCLR	#1,AL
				MOV.B	AL,@LVDSR
				;
				MOV.B	@LVDCR,AL
				BSET	#2,AL
				MOV.B	AL,@LVDCR
				RTS
;******************************************************************************
;*      00-NAME :INTER_RESET
;*      処理概要:ﾘｾｯﾄ時に割り込み発生してｲﾆｼｬﾗｲｽﾞ処理を行う
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;****************************************************************************
;
INTER_RESET:    MOV.W   #H'FFFF,CX              ;-----28muSEC-----
RESET_WAIT:		DJNZ	CX,RESET_WAIT
				;
                MOV.L   #SPOINT,ER7				;ｽﾀｯｸﾎﾟｲﾝﾀ ｾｯﾄ
                DI 								;ﾃﾞｨｽｴｰﾌﾞﾙｲﾝﾀﾗﾌﾟﾄ
                ;
                JSR     @SYSTEM_INIT            ;ｼｽﾃﾑﾚｼﾞｽﾀ ｲﾆｼｬﾗｲｽﾞ
				;JSR		@RESET_INIT
                JSR     @PORT_INIT              ;I/Oﾎﾟｰﾄ ｲﾆｼｬﾗｲｽﾞ
				;
				JSR		@OUTPUT_CLR00
				BSET	#2,@PDR6				;SCONF"DISABLE"
				;BCLR	#2,@PDR1				;ISP RESET"L"
				PH_OFF
				JSR		@TIME_BIT100
				;
				JSR		@SERIAL_INIT
 				JSR		@AD_INIT00
				JSR		@TIMERB1_INIT
				JSR		@TIMERZ0_INIT
				JSR		@IRQ_INIT
				;                                                                            				
				MOV.W	#D'225,AX				;0.4 * 225 = 90SEC
				MOV.W	AX,@ENABLE_COUNT
				MOV.B	#D'90,AL
				MOV.B	AL,@LIFE_TIME			;90SEC
				MOV.B	#H'00,AL
				MOV.B	AL,@COMAND_Y
				;
				JSR		@ADR_READ00				;ADR→DIP_SW1
				;		
DIPSW1_00:		MOV.W	#8,CX					;LAN - 485 切換				
				MOV.B	#H'FF,AL
DIPSW1_01:		JSR		@TIME_BIT00
				BTST	#7,@PDR6
				BNE		DIPSW1_02
				SHAL.B	AL
DIPSW1_02:		DJNZ	CX,DIPSW1_01
				;
				CMP.B	#H'00,AL
				BEQ		TYPE_100BASE
				CMP.B	#H'FF,AL
				BEQ		TYPE_EIA485
				BRA		DIPSW1_00								
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
TYPE_EIA485:	JSR		@RXD_ENABLE01
				EI
				PH_ON
				JSR		@TEST00
				JSR		@WAIT_SFA00
				JSR		@BUFF_CLR00	
				JSR		@INPUT_READ00
				JSR		@TXD_CLR00				
                JSR     @MAIN00
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
TYPE_100BASE:	JSR		@RXD_ENABLE00
				EI
				JSR		@LOCAL_IP00
				BSET	#2,@PDR1				;ISP_RESET"H"
				BCLR	#4,@PCR2				;ERR_LED INPUTPORT
				PH_ON
				JSR		@TEST00
				JSR		@BUFF_CLR00	
				JSR		@INPUT_READ00
				JSR		@TXD_CLR00
				;
				BTST	#6,@PDR6				;ASC - YAJI 切換
				BEQ		TYPE_YAJI
				;
				JSR		@MAIN_LAN00
TYPE_YAJI:		JSR		@MAIN_YAJI00
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
TIMV_CHK00:		MOV.B	@TIMV,AL
				RETZ
				;
				DEC.B	AL
				MOV.B	AL,@TIMV
				RETNZ
				MOV.B	#H'01,AL				;RXD_IN
				MOV.B	AL,@TIMV_FLG
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
LOCAL_IP00:		JSR		@CONF_CHK00
				;
				BSET	#4,@PCR2				;ERR_LED OUTPORT
				BCLR	#4,@PDR2				;CHK_MODE
				;
				BCLR	#2,@PDR6				;SCONF"ENABLE"
				JSR		@TIME_BIT00				;1bit WAIT
				BSET	#2,@PDR1				;ISP_RESET"H"
				;
				JSR		@BUFF_CLR00
				JSR		@TIMV_WAIT00			;AGENT Ver
				;
				BSET	#2,@PDR6				;SCONF"DISABLE"
				;
				;
				MOV.L   #AGENT_DATA00,ER5		;l_ip,0D,0A
				MOV.L   #TX_DATA,ER6
				MOV.B   #D'06,R4L				;EL
				EEPMOV.B
				MOV.W	#D'06,CX
				JSR		@AGENT_CONF00			;0D,0A,top>192.168.100.*
				JSR		@PROMPT_CHK00			;">"
				;
				JSR		@LOCAL_IP01
				;
				MOV.L	#AGENT_COMAND02,ER5		;exit
				MOV.L   #TX_DATA,ER6
				MOV.B   #D'06,R4L
				EEPMOV.B
				MOV.W	#D'06,CX
				JSR		@IP_TRANSMIT00
				JSR		@BUFF_CLR00
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
LOCAL_IP01:		JSR		@ATOI00					;192>> AH
				JSR		@ATOI00					;168
				;
				JSR		@ATOI00
				MOV.B	#D'100,AL
				JSR		@IP_CHK00
				;
				JSR		@ATOI00
				MOV.B	@DIP_SW1,AL
				AND.B	#B'00111111,AL
				JSR		@DIP_BIT30
				INC.B	AL						;IP_ADRESS +1
				JSR		@IP_CHK00
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要: YAJI_CON ADR ADJ
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
DIP_BIT30:		BTST	#6,@PDR6
				RETNZ
				;
				AND.B	#B'00001111,AL
				ADD.B	#D'208,AL				;YAJI_CON D1(209)-DF(223)
				RTS	
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
IP_CHK00:		CMP.B	AL,AH
				RETZ
				;
				MOV.L	#AGENT_COMAND00,ER5		;l_ip=192.168.100.
				MOV.L   #TX_DATA,ER6
				MOV.B   #D'17,R4L
				EEPMOV.B
				;
				MOV.B	@DIP_SW1,AL
				AND.B	#B'00111111,AL
				JSR		@DIP_BIT30
				INC.B	AL						;IP_ADRESS +1
				;
				;
				MOV.B	#H'00,BH				
				MOV.B	#H'00,AH
				JSR		@HEX_ASCII00
				;
				CMP.B	#H'00,BH
				BEQ		IP_CHK01
				OR.B	#B'00110000,BH			;ASCII
				MOV.B	BH,@ER6
				ADDS.L	#1,ER6
				BRA		IP_CHK02
IP_CHK01:		CMP.B	#H'00,AH
				BEQ		IP_CHK03
IP_CHK02:		OR.B	#B'00110000,AH			;ASCII
				MOV.B	AH,@ER6
				ADDS.L	#1,ER6				
IP_CHK03:		OR.B	#B'00110000,AL			;ASCII
				MOV.B	AL,@ER6
				ADDS.L	#1,ER6
				;
				;
				MOV.L	#AGENT_COMAND99,ER5		;<0D><0A>
				MOV.B   #D'02,R4L
				EEPMOV.B
				;
				SUB.L	#TX_DATA,ER6
				MOV.L	ER6,ER2					;CX 	
				;MOV.W	#D'20,CX
				JSR		@AGENT_CONF00
				JSR		@PROMPT_CHK00			;">"OK
				;
				JSR		@RD_BUFFER00
				MOV.B	AL,AH
				JSR		@RD_BUFFER00
				CMP.W	#"OK",AX
				BNE		IP_CHK99		
				;
				JSR		@CONF_SAVE00
				JSR		@PROMPT_CHK00			;">"OK
				;
				JSR		@BUFF_CLR00
				JSR		@TIMV_WAIT00
				JSR		@RD_BUFFER00
				MOV.B	AL,AH
				JSR		@RD_BUFFER00
				CMP.W	#"OK",AX
				BNE		IP_CHK99
				;
				POP.W	AX						;STACK-1
				RTS
				;
IP_CHK99:		JSR		@READ_ERR00
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
READ_ERR00:		MOV.B	@FREE_RUN,AL
				BTST	#0,AL
				BEQ		READ_ERR01
				BSET	#4,@PDR2
				BRA		READ_ERR00
READ_ERR01:		BCLR	#4,@PDR2		
				BRA		READ_ERR00
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
CD_EXIT00:		MOV.L   #AGENT_COMAND02,ER5             ;exit
				MOV.L   #TX_DATA,ER6
				MOV.B   #D'06,R4L
				EEPMOV.B
				MOV.W   #D'06,CX
				JSR     @AGENT_CONF00
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
CD_SERIAL00:	MOV.L   #AGENT_COMAND03,ER5             ;serial
				MOV.L   #TX_DATA,ER6
				MOV.B   #D'08,R4L
				EEPMOV.B
				MOV.W   #D'08,CX
				JSR     @AGENT_CONF00
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
CONF_SAVE00:	MOV.L   #AGENT_COMAND01,ER5             ;save
				MOV.L   #TX_DATA,ER6
				MOV.B   #D'06,R4L
				EEPMOV.B
				MOV.W   #D'06,CX
				JSR     @AGENT_CONF00
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;				
AGENT_CONF00:	JSR		@IP_TRANSMIT00
				JSR		@BUFF_CLR00
				JSR		@TIMV_WAIT00
				RTS				
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;				
PROMPT_CHK00:	MOV.W	#D'26,CX
				;
PROMPT_CHK01:	JSR		@RD_BUFFER00
				CMP.B	#">",AL
				RETZ
				DJNZ	CX,PROMPT_CHK01	
				;
				JSR		@READ_ERR00
				POP.W	AX					;ERR
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
TIMV_WAIT00:	MOV.B	#D'00,AL
				MOV.B	AL,@TIMV
				MOV.B	AL,@TIMV_FLG
				MOV.B	#D'20,AL				;400m * 20 =8SEC
				MOV.B	AL,@FREE_COUNT			
				;
TIMV_WAIT01:	MOV.B	@TIMV_FLG,AL
				RETNZ
				MOV.B	@FREE_COUNT,AL
				BNE		TIMV_WAIT01
				JSR		@READ_ERR00
				RTS
;******************************************************************************
;*      00-NAME :ASCII→HEX
;*      処理概要:
;*      ENTRY   : AL
;*      RETURN  : AH
;******************************************************************************
;
ATOI00:			MOV.B	#D'00,AH
ATOI01:			JSR		@RD_BUFFER00				
				JSR		@DEC_CHK00
				;
				AND.B	#B'00001111,AL
				MOV.B	AH,BL
				SHLL.B	AH					;*2
				SHLL.B	AH					;*2
				ADD.B	BL,AH
				SHLL.B	AH
				ADD.B	AL,AH
				BRA		ATOI01
				;
				;
MANUAL_ATOI00:	JSR		@DEC_CHK00
				AND.B	#B'00001111,AL
				MOV.B	AH,BL
				SHLL.B	AH					;*2
				SHLL.B	AH					;*2
				ADD.B	BL,AH
				SHLL.B	AH
				ADD.B	AL,AH
				RTS	
				;
				;
AUTO_ATOI00:	MOV.B	#D'00,AH
AUTO_ATOI01:	MOV.B	@ER6,AL	
				ADDS.L	#1,ER6			
				JSR		@DEC_CHK00
				;
				AND.B	#B'00001111,AL
				MOV.B	AH,BL
				SHLL.B	AH					;*2
				SHLL.B	AH					;*2
				ADD.B	BL,AH
				SHLL.B	AH
				ADD.B	AL,AH
				BRA		AUTO_ATOI01			
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
DEC_CHK00:		CMP.B	#"0",AL
				BLT		DEC_CHK01
				CMP.B	#"9",AL
				BGT		DEC_CHK01
				RTS
				;
DEC_CHK01:		POP.W	BX			;ERR
				RTS	
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : AL
;*      RETURN  : BH=100 AH=10 AL=1
;******************************************************************************
;
HEX_ASCII01:	INC.B	BH
HEX_ASCII00:	MOV.B	#H'64,BL
				SUB.B	BL,AL
				BCC		HEX_ASCII01
				ADD.B	#H'64,AL
				BRA		HEX_ASCII02
				;
HEX_ASCII03:	INC.B	AH
HEX_ASCII02:	MOV.B	#H'0A,BL
				SUB.B	BL,AL
				BCC		HEX_ASCII03
				ADD.B	#H'0A,AL
				RTS				
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
CONF_CHK00:		MOV.W	#8,CX
				MOV.B	#H'FF,AL
CONF_CHK01:		JSR		@TIME_BIT00
				BTST	#3,@PDR6
				BNE		CONF_CHK02
				SHAL.B	AL
CONF_CHK02:		DJNZ	CX,CONF_CHK01
				CMP.B	#H'00,AL
				RETZ
				CMP.B	#H'FF,AL
				BEQ		CONF_CHK03
				BRA		CONF_CHK00
				;
CONF_CHK03:		BSET	#2,@PDR1				;ISP_RESET"H"
				BRA		$
;******************************************************************************
;*      00-NAME :MAIN
;*      処理概要:ﾒｲﾝﾙｰﾁﾝ
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
MAIN_LAN00:		JSR		@LIFE_CHK00
				JSR		@RXD_CHK00
				JSR		@INPUT_READ00
				MOV.B	@TXD_FLG,AL
				BEQ		MAIN_LAN00
				;
				JSR		@INPUT_SEND00
				BRA		MAIN_LAN00
;******************************************************************************
;*      00-NAME :MAIN
;*      処理概要:ﾒｲﾝﾙｰﾁﾝ
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
MAIN_YAJI00:	JSR		@LIFE_CHK00
				JSR		@RXD_CHK00
				BRA		MAIN_YAJI00
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
FST_CHK00:		JSR		@RD_BUFFER00
				CMP.B	#H'05,AL
				RETZ
				CMP.B	#H'02,AL
				RETZ
				CMP.B	#H'06,AL
				RETZ
				;
				JSR		@RD_BUFFER00
				CMP.B	#H'05,AL
				RETZ
				CMP.B	#H'02,AL
				RETZ
				CMP.B	#H'06,AL
				RETZ
				;
				JSR		@RD_BUFFER00
				RTS				
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
RXD_CHK00:		MOV.B	@RXD_ETX,AL
				CMP.B	#D'03,AL
				RETNZ
				;
				WINDOW_OFF
				;
				JSR		@LIFE_COUNT10
				JSR		@FST_CHK00
				;
				CMP.B	#H'05,AL				;ENQ
				BEQ		RXD_CHK01
				CMP.B	#H'02,AL				;STX
				BEQ		RXD_CHK03
				CMP.B	#H'06,AL				;ACK
				BEQ		RXD_CHK05
				JSR		@BUFF_CLR00
				WINDOW_ON
				RTS
				;
RXD_CHK01:		JSR		@ADR_CHK00
				BEQ		RXD_CHK02
				JSR		@BUFF_CLR00
				WINDOW_ON
				RTS
				;				
RXD_CHK02:		JSR		@BUFF_CLR00
				WINDOW_ON
				;
				MOV.L   #TX_DATA,ER6
				MOV.B	#H'04,AL				;EOT
				JSR		@LOAD_TXDATA
				JSR		@MAKE_ADR00
				MOV.B	#H'03,AL				;ETX
				JSR		@LOAD_TXDATA				
				MOV.W	#D'04,CX
				JSR		@IP_TRANSMIT00
				RTS
				;
				;
RXD_CHK05:		JSR		@ADR_CHK00
				JSR		@BUFF_CLR00
				WINDOW_ON
				RTS
				;
				;
RXD_CHK03:		JSR		@ADR_CHK00
				BEQ		RXD_CHK04				
				JSR		@BUFF_CLR00
				WINDOW_ON
				;
ANSER_NAK00:	MOV.L   #TX_DATA,ER6
				MOV.B	#H'15,AL				;NAK
				JSR		@LOAD_TXDATA
				JSR		@MAKE_ADR00
				MOV.B	#H'03,AL				;ETX
				JSR		@LOAD_TXDATA				
				MOV.W	#D'05,CX
				JSR		@IP_TRANSMIT00
				RTS
				;
				;
RXD_CHK04:		MOV.L	#H'0000:32,ER5				;RD_BUFFER → TEMP_AREA
                MOV.W   @RD_POINT,R5
				;
				MOV.L   #TEMP_AREA03,ER6			;COMAND
				MOV.W	@WR_POINT,R4				;FA**  MOV.B   #D'22,R4L
				EEPMOV.B
				JSR		@BUFF_CLR00
				WINDOW_ON
				;
				MOV.L   #TEMP_AREA03,ER6			;COMAND
				MOV.B	@ER6,AL
				MOV.B	#"L",AH						;LAN"DAMY"
				MOV.W	#D'08,CX
				MOV.L	#JUMP_TABLE00,ER5
				JSR		@PRG_SERCH00
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
ANSER_I00:		MOV.L	#TEMP_AREA04,ER5		;TIME 2BYTE
				MOV.B	#D'00,AH
				MOV.B	@ER5,AL
				JSR		@MANUAL_ATOI00
				ADDS.L	#1,ER5
				MOV.B	@ER5,AL
				JSR		@MANUAL_ATOI00
				MOV.B	AH,@LIFE_TIME
				;
				MOV.L	#TEMP_AREA06,ER5		;F_IP COPY				
				MOV.L   #READ_IP00,ER6
				MOV.B   #D'15,R4L
				EEPMOV.B
				;
				;JSR	@FORWARD_IP00
				;
				MOV.L   #TX_DATA,ER6
				MOV.B	#H'02,AL				;STX
				JSR		@LOAD_TXDATA
				JSR		@MAKE_ADR00
				;
				MOV.B	#"x",AL					;参加要求
				JSR		@LOAD_TXDATA
				MOV.B	#H'03,AL				;ETX
				JSR		@LOAD_TXDATA				
				MOV.W	#D'05,CX				;
				JSR		@IP_TRANSMIT00
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
ANSER_Y00:		MOV.B	#H'FF,AL
				MOV.B	AL,@COMAND_Y			;参加許可
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
ANSER_G00:		JSR		@OUTPUT_DATA00
				;
ANSER_ACK00:	MOV.L   #TX_DATA,ER6
				MOV.B	#H'06,AL				;ACK
				JSR		@LOAD_TXDATA
				JSR		@MAKE_ADR00
				MOV.B	#H'03,AL				;ETX
				JSR		@LOAD_TXDATA				
				MOV.W	#D'04,CX
				JSR		@IP_TRANSMIT00
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
INPUT_SEND00:	MOV.L   #TX_DATA,ER6
				MOV.B	#H'02,AL					;STX
				JSR		@LOAD_TXDATA
				JSR		@MAKE_ADR00
				MOV.B	#"g",AL
				JSR		@LOAD_TXDATA
				;
				JSR		@INPUT_DATA00
				MOV.W	#D'17,CX					;LRC(-1)
				JSR		@IP_TRANSMIT00
INPUT_SEND99:	JSR		@TXD_CLR00
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
ANSER_P00:		MOV.L	#TEMP_AREA04,ER5			;NUM 1BYTE
				;
				MOV.B	@ER5,AL						;"1","2","3","4"
				CMP.B	#"1",AL
				BEQ		ANSER_P01
				CMP.B	#"2",AL
				BEQ		ANSER_P02
				CMP.B	#"3",AL
				BEQ		ANSER_P03
				CMP.B	#"4",AL
				BEQ		ANSER_P04
				JSR		@ANSER_NAK00
				RTS
				;
ANSER_P01:		MOV.L	#OUT_MEM00,ER6
				JSR		@OUT_TABLE00
ANSER_P02:		MOV.L	#OUT_MEM32,ER6
				JSR		@OUT_TABLE00
ANSER_P03:		MOV.L	#OUT_MEM64,ER6
				JSR		@OUT_TABLE00
ANSER_P04:		MOV.L	#OUT_MEM96,ER6
				JSR		@OUT_TABLE00
				;
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
OUT_TABLE00:	INC.L	#2,ER5				;txt num + room 
				;
				MOV.B	#H'00,AH
				MOV.B	@ER5,AL
				INC.L	#1,ER5
				JSR		@MANUAL_ATOI00
				MOV.B	@ER5,AL
				INC.L	#1,ER5
				JSR		@MANUAL_ATOI00
				;
				MOV.W	#H'0000,CX
				MOV.B	AH,CL
				;
OUT_TABLE01:	INC.L	#2,ER5				;ROOM NUM
				;
				JSR		@SWAP_OR00
				JSR		@SWAP_OR00
				DJNZ	CX,OUT_TABLE01
				;
				MOV.B	@ER5,AL				;ETX CHK
				CMP.B	#H'03,AL
				BNE		OUT_TABLE02
				JSR		@ANSER_ACK00
				POP.W	AX
				RTS
				;				
OUT_TABLE02:	JSR		@ANSER_NAK00
				POP.W	AX
				RTS	
;******************************************************************************
;*      00-NAME :
;*      処理概要 :IP TRNSMIT
;*      ENTRY   :AH,ER4(EX)
;*      RETURN  :
;******************************************************************************
;
TEST_SEND:		MOV.W	#D'64,CX
				MOV.L	#OUT_MEM00,ER4
				BSET	#5,@SCR3
				;
TEST_SEND01:	BTST	#7,@SSR
				BEQ		TEST_SEND01
				;
				MOV.B	@ER4,AH
				MOV.B	AH,@TDR
				;
TEST_SEND02:	BTST	#2,@SSR
				BEQ		TEST_SEND02
				;
				ADDS.L	#1,ER4
				DJNZ	CX,TEST_SEND01
				;
				BCLR	#5,@SCR3
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
SWAP_OR00:		MOV.B	@ER5,AL
				INC.L	#1,ER5
				AND.B	#B'00001111,AL			;0011 4,3,2,1
				MOV.B	@ER5,AH
				INC.L	#1,ER5					;0011 8,7,6,5
				SHAL.B	AH
				SHAL.B	AH
				SHAL.B	AH
				SHAL.B	AH
				OR.B	AH,AL
				MOV.B	AL,@ER6
				INC.L	#1,ER6
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
ANSER_K00:		MOV.L	#TEMP_AREA04,ER5
				JSR		@NUM_CONV00					;BL=ROON NUM
				SHAL.B	AL							;* 2
				AND.W	#H'00FF,AX
				MOV.B	@(OUT_MEM00,ER0),BL
				INC.W	#1,AX
				MOV.B	@(OUT_MEM00,ER0),BH		;16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1	
				;
				MOV.W	BX,@NEW_OUTPUT
				MOV.B	@ER5,AL
				INC.L	#1,ER5
				AND.B	#B'00000011,AL
				MOV.B	AL,@NEW_STATUS
				;
				JSR		@ANSER_K10
				;
				MOV.W	@NEW_OUTPUT,BX
				MOV.B	@NEW_STATUS,DL				
				;
				MOV.W	#D'16,AX	
ANSER_K01:		SHLL.W	BX							;16←15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0
				BCC		ANSER_K02
				MOV.B	DL,@(OUTPUT00,ER0)
ANSER_K02:		DJNZ	AX,ANSER_K01
				;
				MOV.B	@ER5,AL
				CMP.B	#H'03,AL
				BNE		ANSER_K03
				JSR		@ANSER_ACK00
				RTS
ANSER_K03:		JSR		@ANSER_NAK00
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
ANSER_K10:		MOV.B	@ER5,AL
				INC.L	#1,ER5
				JSR		@MANUAL_ATOI00
				MOV.B	@ER5,AL
				INC.L	#1,ER5
				JSR		@MANUAL_ATOI00
				MOV.B	AH,AL
				RETZ
				MOV.B	#H'00,AH
ANSER_K11:		PUSH.W	AX
				;
				JSR		@NUM_CONV00
				SHAL.B	AL							;ROOM NUM * 2
				AND.W	#H'00FF,AX
				MOV.B	@(OUT_MEM00,ER0),BL
				INC.W	#1,AX
				MOV.B	@(OUT_MEM00,ER0),BH		;16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1	
				;
				MOV.B	@ER5,DL						;STATUS
				AND.B	#B'00000011,DL
				INC.L	#1,ER5
				;
				MOV.W	#D'16,AX	
ANSER_K12:		SHLL.W	BX							;16←15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0
				BCC		ANSER_K23
				MOV.B	DL,@(OUTPUT00,ER0)
ANSER_K23:		DJNZ	AX,ANSER_K12
				;
				POP.W	AX
				DJNZ	AX,ANSER_K11
				RTS
;******************************************************************************
;*      00-NAME :MAIN
;*      処理概要:ﾒｲﾝﾙｰﾁﾝ
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
MAIN00:         JSR		@LIFE_CHK00
				JSR		@INPUT_READ00
				JSR		@ENQ_ANSER00
				JSR		@STX_ANSER00
				BRA		MAIN00
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;				
ENQ_ANSER00:	.EQU	$
				MOV.B	@RXD_ENQ,AL
				RETZ
				MOV.B	@RXD_COUNT,AL
				CMP.B	#D'08,AL			;H05 + ENQ+ADR,ADR
				RETNZ
				;
				MOV.B	#H'00,AL
				MOV.B	AL,@RXD_ENQ
				;
				JSR		@ENQ_READ00
				JSR		@ADR_CHK00
				RETNZ
				;
				MOV.B	@COMAND_Y,AL
				RETZ
				;
ENQ_ANSER01:	MOV.B	@TXD_FLG,AL
				BNE		ENQ_ANSER02
				;
				MOV.L   #TX_DATA,ER6
				MOV.B	#H'04,AL					;EOT
				JSR		@LOAD_TXDATA
				MOV.W	#D'01,CX
				JSR		@RS_TRANSMIT00
				RTS
				;
				;
ENQ_ANSER02:	MOV.L   #FIX_DATA00,ER5				;INPUT
				MOV.L   #TX_DATA,ER6
				MOV.B   #D'04,R4L
				EEPMOV.B
ENQ_ANSER03:	JSR		@INPUT_DATA00
				MOV.W	#D'18,CX
				JSR		@RS_TRANSMIT00
				JSR		@BUFF_CLR00
				JSR		@TXD_CLR00
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;				
STX_ANSER00:	.EQU	$
				MOV.B	@RXD_ETX,AL
				CMP.B	#D'04,AL				;3+1
				RETNZ
				;
				MOV.B	#H'00,AL
				MOV.B	AL,@RXD_ETX
				;
				JSR		@STX_READ00
				JSR		@ADR_CHK00
				RETNZ
				;
STX_ANSER01:	JSR		@RD_BUFFER00
				MOV.B	#"R",AH					;RS485"DAMY"
				MOV.W	#D'08,CX
				MOV.L	#JUMP_TABLE00,ER5
				JSR		@PRG_SERCH00
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
INPUT_DATA02:	MOV.B	#"0",AL
				JSR		@LOAD_TXDATA
				JSR		@LOAD_TXDATA
				JSR		@LOAD_TXDATA
				JSR		@LOAD_TXDATA
				BRA		INPUT_DATA01
				;
INPUT_DATA00:	MOV.B	@TXD_FLG,AL
				BTST	#0,AL
				BEQ		INPUT_DATA02
				;
				MOV.B	@INPUT_EDGE01,AL			;8,7,6,5
				JSR		@ASCII_CONV
				JSR		@LOAD_TXDATA
				;
				MOV.B	@INPUT_EDGE00,AL			;4,3,2,1
				JSR		@ASCII_CONV
				JSR		@LOAD_TXDATA
				;
				MOV.B	@INPUT_EDGE03,AL			;16,15,14,13
				AND.B	#B'00000011,AL
				JSR		@ASCII_CONV
				JSR		@LOAD_TXDATA
				;
				MOV.B	@INPUT_EDGE02,AL			;12,11,10,9
				JSR		@ASCII_CONV
				JSR		@LOAD_TXDATA
				;
INPUT_DATA01:	MOV.B	@INPUT_STATUS01,AL			;8,7,6,5
				JSR		@ASCII_CONV
				JSR		@LOAD_TXDATA
				;
				MOV.B	@INPUT_STATUS00,AL			;4,3,2,1
				JSR		@ASCII_CONV
				JSR		@LOAD_TXDATA
				;
				MOV.B	@INPUT_STATUS03,AL			;16,15,14,13
				AND.B	#B'00000011,AL
				JSR		@ASCII_CONV
				JSR		@LOAD_TXDATA
				;
				MOV.B	@INPUT_STATUS02,AL			;12,11,10,9
				JSR		@ASCII_CONV
				JSR		@LOAD_TXDATA
				;
				MOV.B	#"0",AL
				JSR		@LOAD_TXDATA				;"0"
				;
				MOV.L	#D'00,ER0
				MOV.B	@INPUT_STATUS03,AL			;16,15,14,13(解錠)
				JSR		@BIT7_CHK00
				JSR		@ASCII_CONV
				JSR		@LOAD_TXDATA
				;
				JSR		@MAKE_REM00
				JSR		@MAKE_LRC00					;LRC→AH
				MOV.B	AH,@ER6
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
ADR_CHK00:		JSR		@ADR_CONV00
				MOV.B	@DIP_SW1,AL
				AND.B	#B'00111111,AL
				JSR		@DIP_BIT30					;ADD.B	#D'208,AL
				MOV.B	@RXD_ADR,AH
				CMP.B	AH,AL
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
MAKE_ADR00:		MOV.B	@DIP_SW1,AL
				AND.B	#B'00111111,AL
				JSR		@DIP_BIT30
				SHLR.B	AL
				SHLR.B	AL
				SHLR.B	AL
				SHLR.B	AL				
				JSR		@ASCII_CONV					;HEX→ASCII=AL
				JSR		@LOAD_TXDATA
				MOV.B	@DIP_SW1,AL
				JSR		@ASCII_CONV					;HEX→ASCII
				JSR		@LOAD_TXDATA
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   :AX
;*      RETURN  :
;******************************************************************************  
;
BIT7_CHK00:		MOV.B	@DIP_SW1,BL
				AND.B	#B'11000000,BL
				;
				BTST	#6,BL
				BEQ		BIT7_CHK01
				BTST	#7,BL
				BEQ		BIT7_CHK02
				RTS
				;
BIT7_CHK01:		BCLR	#0,AL
				BCLR	#1,AL
				AND.B	#B'00000011,AL
				RTS
				;
BIT7_CHK02:		MOV.B	@OUTPUT15,BL
				NOT.B	BL
				AND.B	#B'00000001,BL
				MOV.B	BL,AL
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   :AX
;*      RETURN  :
;******************************************************************************  
;
MAKE_REM00:		MOV.B	@TXD_FLG,AL
				BTST	#4,AL
				BNE		MAKE_REM01
				;
				MOV.B	#"0",AL
				JSR		@LOAD_TXDATA
				MOV.B	#"0",AL
				JSR		@LOAD_TXDATA
				MOV.B	#H'03,AL
				JSR		@LOAD_TXDATA			;ETX
				RTS
				;
MAKE_REM01:		MOV.B	@REM_CODE00,AL
				JSR		@LOAD_TXDATA
				MOV.B	@REM_CODE01,AL
				JSR		@LOAD_TXDATA
				MOV.B	#H'03,AL
				JSR		@LOAD_TXDATA			;ETX
				RTS				
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   :AX
;*      RETURN  :
;******************************************************************************  
;
TXD_CLR00:		MOV.B	#H'00,AL
				MOV.B	AL,@TXD_FLG
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   :AX
;*      RETURN  :
;******************************************************************************  
;
MAKE_LRC00:		PUSH.L	ER6
				;
				MOV.L	#TX_DATA,ER6		;H'02
				ADDS.L	#1,ER6
				MOV.B	@ER6,AH				;"F"
				;
				MOV.W	#D'15,CX
MAKE_LRC01:		ADDS.L	#1,ER6
				MOV.B	@ER6,AL
				XOR.B	AL,AH
				DJNZ	CX,MAKE_LRC01
				;
				POP.L	ER6
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   :AX
;*      RETURN  :
;******************************************************************************  
;
ASCII_CONV:		.EQU    $
				PUSH.W	BX
				AND.W	#H'000F,AX
				MOV.B	@(ASCII_TABLE00,ER0),BL
				MOV.B	BL,AL
				POP.W	BX
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   :
;*      RETURN  :
;******************************************************************************
;
PRG_SERCH00:	MOV.W	@ER5,BX
				CMP.W	AX,BX
				BEQ		PRG_SERCH01
				ADD.L	#6,ER5
				DJNZ	CX,PRG_SERCH00
				RTS
PRG_SERCH01:	MOV.L	@(2,ER5),ER5
				JSR		@ER5
				RTS			
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
STX_ANSER02:	MOV.B	@COMAND_Y,AL
				RETZ
				;
				JSR		@RD_RESET00
				JSR		@STX_READ00
				JSR		@LRC_CHK00				;RD_BUFFER　→　TEMP_AREA
				;
				JSR		@OUTPUT_DATA00
				;
				MOV.L   #TX_DATA,ER6
				MOV.B	#H'06,AL			;ACK
				JSR		@LOAD_TXDATA
				;
				MOV.W	#D'01,CX
				MOV.B	@TEMP_AREA12,AL		;ETX or "I"
				CMP.B	#"I",AL
				BEQ		STX_ANSER03
				JSR		@RS_TRANSMIT00
				RTS
				;
STX_ANSER03:	MOV.B	@TXD_FLG,AL
				BSET	#0,AL
				MOV.B	AL,@TXD_FLG
				JSR		@RS_TRANSMIT00
				RTS
				;
STX_ANSER99:	MOV.L   #FIX_DATA01,ER5				;"x"
				MOV.L   #TX_DATA,ER6
				MOV.B   #D'08,R4L
				EEPMOV.B
				;
				MOV.W	#D'08,CX
				JSR		@RS_TRANSMIT00
				JSR		@BUFF_CLR00
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
OUTPUT_DATA00:	MOV.L	#TEMP_AREA04,ER1
				;
				JSR		@SEPARATOR00
				MOV.W	AX,@OUTPUT03
				JSR		@SEPARATOR00
				MOV.W	AX,@OUTPUT01
				JSR		@SEPARATOR00
				MOV.W	AX,@OUTPUT07
				JSR		@SEPARATOR00
				MOV.W	AX,@OUTPUT05
				JSR		@SEPARATOR00
				MOV.W	AX,@OUTPUT11
				JSR		@SEPARATOR00
				MOV.W	AX,@OUTPUT09
				;
				JSR		@SEPARATOR00
				JSR		@SOL_CONT00
				MOV.W	AX,@OUTPUT15		;SOL
				;				
				JSR		@SEPARATOR00
				MOV.W	AX,@OUTPUT13
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
ROCK_OPEN00:	MOV.B	@RETRY_TIME00,AL
				RETZ
				DEC.B	AL
				MOV.B	AL,@RETRY_TIME00
				RETNZ
				;
				MOV.B	@OLD_INPUT01,AL		
				BTST	#4,AL
				BNE		ROCK_OPEN01
				MOV.B	#H'00,AL
				MOV.B	AL,@RETRY_COUNT00
				RTS
				;
ROCK_OPEN01:	MOV.B	@RETRY_COUNT00,AL
				DEC.B	AL
				MOV.B	AL,@RETRY_COUNT00
				RETZ			
				MOV.B	#D'68,AL
				MOV.B	AL,@RETRY_TIME00
				MOV.B	#D'03,AL
				MOV.B	AL,@OUTPUT15
				RTS
				;
ROCK_CLOSE00:	MOV.B	@RETRY_TIME01,AL
				RETZ
				;
				DEC.B	AL
				MOV.B	AL,@RETRY_TIME01
				RETNZ
				MOV.B	@OLD_INPUT01,AL		
				BTST	#4,AL
				BEQ		ROCK_CLOSE01
				;
				MOV.B	#H'00,AL
				MOV.B	AL,@RETRY_COUNT01
				RTS				
				;
ROCK_CLOSE01:	MOV.B	@RETRY_COUNT01,AL
				DEC.B	AL
				MOV.B	AL,@RETRY_COUNT01
				RETZ							
				;
				MOV.B	#D'68,AL
				MOV.B	AL,@RETRY_TIME01
				MOV.B	#D'03,AL
				MOV.B	AL,@OUTPUT15
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
SOL_CONV00:		CMP.B	#H'00,AH
				RETZ		
				CMP.B	#H'01,AH
				RETZ
				CMP.B	#H'02,AH
				BEQ		SOL_CONV01
				;
				MOV.B	#H'00,AH
				RTS
				;
SOL_CONV01:		MOV.B	#H'01,AH
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
RETRY_CHK00:	MOV.B	@RETRY_TIME00,CL
				RETZ
				POP.W	AX
				MOV.W	@OUTPUT15,AX
				RTS
				;
RETRY_CHK01:	MOV.B	@RETRY_TIME01,CL
				RETZ
				POP.W	AX
				MOV.W	@OUTPUT15,AX
				RTS					
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
SOL_CONT00:		JSR		@RETRY_CHK00
				JSR		@RETRY_CHK01
				JSR		@SOL_CONV00
				;
				MOV.B	@DIP_SW1,CL
				AND.B	#B'11000000,CL
				BEQ		SOL_CONT01
				CMP.B	#B'11000000,CL
				BEQ		SOL_CONT02
				RTS
SOL_CONT01:		MOV.B	#H'00,AH
				RTS
				;
SOL_CONT02:		CMP.B	#H'01,AH
				BEQ		SOL_CONT03
				;
				MOV.B	@OLD_INPUT01,CL		
				BTST	#4,CL
				RETZ						;開錠状態
				MOV.B	#D'05,CL
				MOV.B	CL,@RETRY_COUNT00
				MOV.B	#D'68,CL
				MOV.B	CL,@RETRY_TIME00	;28(0.7SEC ONESHOT)+40(1SEC RETRYTIME)
				MOV.B	#H'03,AH
				RTS
				;
SOL_CONT03:		MOV.B	#H'00,AH
				MOV.B	@OLD_INPUT01,CL		
				BTST	#4,CL
				RETNZ						;施錠状態
				MOV.B	#D'05,CL
				MOV.B	CL,@RETRY_COUNT01
				MOV.B	#D'68,CL
				MOV.B	CL,@RETRY_TIME01	;28(0.7SEC ONESHOT)+40(1SEC RETRYTIME)
				MOV.B	#H'03,AH
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
SEPARATOR00:	MOV.B	@ER1,AL				;BX
				ADDS.L	#1,ER1
				;
				JSR		@CARA_CHK00
				BTST	#6,AL
				BEQ		SEPARATOR01
				INC.B	AL
				BSET	#3,AL
				;
SEPARATOR01:	MOV.B	AL,AH
				SHLR.B	AL
				SHLR.B	AL
				AND.B	#B'00000011,AL
				AND.B	#B'00000011,AH
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;				
LRC_CHK00:		MOV.L	#TEMP_AREA01,ER1	;BX
				JSR		@RD_BUFFER00
				MOV.B	AL,@ER1
				MOV.B	AL,AH
				ADDS.L	#1,ER1
				;
LRC_CHK01:		JSR		@RD_BUFFER00
				MOV.B	AL,@ER1				;BX
				XOR.B	AL,AH
				CMP.B	#H'03,AL
				BEQ		LRC_CHK02
				ADDS.L	#1,ER1
				BRA		LRC_CHK01
				;
LRC_CHK02:		JSR		@RD_BUFFER00
				CMP.B	AL,AH
				RETZ
				POP.W	AX					;ERR
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;				
OUTPUT_SCAN00:	MOV.B	@PRISCALER,AL
				BTST	#0,AL
				RETZ
				;
				JSR		@ONE_SHOT00
				;
				MOV.B	#B'00000000,BL
				MOV.B	#D'7,AH			;BIT
				MOV.W	#D'08,CX
				MOV.L	#OUTPUT01,ER3	;DX
				;
OUTPUT_SCAN01:	JSR		@OUTPUT_CAP00
				ADDS.L	#1,ER3
				DEC.B	AH
				DJNZ	CX,OUTPUT_SCAN01
				;
				BCLR	#3,@PDR5		;CS4
				MOV.B	BL,@PDR3		;TC74HCT574AF WRITE
				JSR		@ADJST00
				BSET	#3,@PDR5
				;
				MOV.B	#B'00000000,BL
				MOV.B	#D'7,AH			;BIT
				MOV.W	#D'07,CX
				MOV.L	#OUTPUT09,ER3	;DX
				;
OUTPUT_SCAN02:	JSR		@OUTPUT_CAP00
				ADDS.L	#1,ER3
				DEC.B	AH
				DJNZ	CX,OUTPUT_SCAN02
				;
				;;BCLR	#4,@PDR7		;CS5(一次試作基板)
				BCLR	#4,@PDR5		;CS5(二次試作基板)
				MOV.B	BL,@PDR3		;TC74HCT574AF WRITE
				JSR		@ADJST00
				;;BSET	#4,@PDR7		;CS5(一次試作基板)
				BSET	#4,@PDR5		;CS5(二次試作基板)
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   :OUTPUT**>>AL,BIT=AH 
;*      RETURN  :BL  
;******************************************************************************
;
OUTPUT_CAP00:	.EQU	$
				MOV.B	@ER3,AL
				CMP.B	#H'00,AL
				BNE		OUTPUT_CAP01
				BCLR	AH,BL
				RTS
OUTPUT_CAP01:	CMP.B	#H'01,AL
				BNE		OUTPUT_CAP02
				BSET	AH,BL
				RTS
OUTPUT_CAP02:	CMP.B	#H'02,AL
				BNE		OUTPUT_CAP04
				;
				MOV.B	@FREE_RUN,AL
				BTST	#0,AL
				BNE		OUTPUT_CAP03
				BSET	AH,BL
				RTS
OUTPUT_CAP03:	BCLR	AH,BL
				RTS
				;
OUTPUT_CAP04:	BSET	AH,BL
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;				
ONE_SHOT00:		MOV.W	#D'16,CX
				MOV.L	#OUTPUT01,ER3		;DX
				;
ONE_SHOT01:		MOV.B	@ER3,AL
				;
				CMP.B	#H'00,AL			;OFF
				BEQ		ONE_SHOT02
				CMP.B	#H'01,AL			;ON
				BEQ		ONE_SHOT02
				CMP.B	#H'02,AL			;BLIK
				BEQ		ONE_SHOT02
				INC.B	AL
				AND.B	#B'00011111,AL		;00000011-00011111=28
				MOV.B	AL,@ER3				;25 * 28=700mSEC
				;
ONE_SHOT02:		ADDS.L	#1,ER3
				DJNZ	CX,ONE_SHOT01
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;				
ADR_READ00:		.EQU	$
				JSR		@ADBIT5_CHK00
				JSR		@AD_INIT00
				BCLR    #2,@PDR5		;CS3 U11 TC74HC541AF
				JSR		@ADJST00
				JSR		@ADJST00
				MOV.B	@PDRB,AL
				MOV.B	AL,AH			;*******0
				;
				JSR		@ADBIT5_CHK00
				JSR		@AD_INIT07
				BCLR    #2,@PDR5
				JSR		@ADJST00
				JSR		@ADJST00				
				MOV.B	@PDRB,AL
				BSET	#2,@PDR5
				OR.B	AH,AL
				;
				NOT.B	AL
				MOV.B	AL,@DIP_SW1
				AND.B	#B'00111111,AL
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;	
ASCII_SERCH00:	MOV.W	#D'16,CX
				MOV.L   #ASCII_TABLE01,ER4
ASCII_SERCH01:	MOV.B   @ER4,AH
				CMP.B   AL,AH
				BEQ     ASCII_SERCH02
				ADDS.L	#2,ER4
				DJNZ    CX,ASCII_SERCH01
				POP.W	AX						;ERR
				RTS
				;		
ASCII_SERCH02:	ADDS.L	#1,ER4
				MOV.B	@ER4,AL
				RTS	
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;	
ADR_CONV00:		.EQU	$
				MOV.B	#H'FF,AL
				MOV.B	AL,@RXD_ADR
				;
				JSR		@RD_BUFFER00
				JSR		@ASCII_SERCH00
				MOV.B	AL,BH
				JSR		@RD_BUFFER00
				JSR		@ASCII_SERCH00
				MOV.B	AL,BL
				;
				SHAL.B	BL				;0←00043210
				SHAL.B	BL				;0←00432100
				SHAL.B	BL				;0←04321000
				SHAL.B	BL				;0←43210000
				;
				ROTXR.W	BX				;00000432→1→4321000
				ROTXR.W	BX				;00000043→2→1432100
				ROTXR.W	BX				;00000004→3→2143210
				ROTXR.W	BX				;00000000→4→3214321
				;
				MOV.B	BL,@RXD_ADR		;B'43214321,@RXD_ADR
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  AL
;******************************************************************************
;	
NUM_CONV00:		.EQU	$
				MOV.B	@ER5,AL
				INC.L	#1,ER5
				JSR		@ASCII_SERCH00
				MOV.B	AL,BH
				MOV.B	@ER5,AL
				INC.L	#1,ER5
				JSR		@ASCII_SERCH00
				MOV.B	AL,BL
				;
				SHAL.B	BL				;0←00043210
				SHAL.B	BL				;0←00432100
				SHAL.B	BL				;0←04321000
				SHAL.B	BL				;0←43210000
				;
				ROTXR.W	BX				;00000432→1→4321000
				ROTXR.W	BX				;00000043→2→1432100
				ROTXR.W	BX				;00000004→3→2143210
				ROTXR.W	BX				;00000000→4→3214321
				;
				MOV.B	BL,AL
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
INPUT_READ00:	.EQU	$
				MOV.B	@READ_FLG,AL
				RETZ
				MOV.B	#H'00,AL
				MOV.B	AL,@READ_FLG
				;
				JSR		@U12_INPUT00		;>>AL
				MOV.B	#D'00,AH
				MOV.W	#D'08,CX
				MOV.L	#INPUT01,ER4		;EX
				;
INPUT_READ01:	JSR		@BIT_CHK00	
				INC.B	AH
				ADDS.L	#1,ER4
				DJNZ	CX,INPUT_READ01
				;
				JSR		@U13_INPUT00		;>>AL
				MOV.B	#D'00,AH
				MOV.W	#D'06,CX
				MOV.L	#INPUT09,ER4		;EX				
				;
INPUT_READ02:	JSR		@BIT_CHK00	
				INC.B	AH
				ADDS.L	#1,ER4
				DJNZ	CX,INPUT_READ02
				;
				JSR		@INPUT_CHK00
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
INPUT_CHK00:	.EQU	$
				MOV.B	#D'00,AH
				MOV.W	#D'08,CX
				MOV.L	#INPUT01,ER4		;EX
				;
				MOV.B	@OLD_INPUT00,AL
				;
INPUT_CHK01:	JSR		@INPUT_CAP00
				INC.B	AH
				ADDS.L	#1,ER4
				DJNZ	CX,INPUT_CHK01
				MOV.B	AL,@NEW_INPUT00
				;
				;
				MOV.B	#D'00,AH
				MOV.W	#D'06,CX
				MOV.L	#INPUT09,ER4		;EX
				;
				MOV.B	@OLD_INPUT01,AL
				;
INPUT_CHK02:	JSR		@INPUT_CAP00
				INC.B	AH
				ADDS.L	#1,ER4
				DJNZ	CX,INPUT_CHK02
				MOV.B	AL,@NEW_INPUT01
				;
				MOV.W	@NEW_INPUT00,AX
				MOV.W	@OLD_INPUT00,BX
				XOR.W	BX,AX
				RETZ
				;
				MOV.B	@TXD_FLG,CL
				BTST	#0,CL
				RETNZ
				;
				JSR		@EDGE_CHANGE00				;AX → EDGE
				;
				MOV.W	@NEW_INPUT00,AX
				MOV.W	AX,@OLD_INPUT00
				NOT.W	AX
				;
				JSR		@INPUT_CHANGE00				;AX → INPUT
				;
				MOV.B	@TXD_FLG,AL
				BSET	#0,AL
				MOV.B	AL,@TXD_FLG
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : AX
;*      RETURN  :  
;******************************************************************************
;
EDGE_CHANGE00:	.EQU	$
				MOV.B	AL,@INPUT_EDGE02		;16,15,14,13,12,11,10,9
				JSR		@SIFT_REG00
				MOV.B	AL,@INPUT_EDGE03		;0,0,0,0,16,15,14,13		
				;
				MOV.B	@INPUT_EDGE02,AL
				AND.B	#B'00001111,AL
				MOV.B	AL,@INPUT_EDGE02		;0,0,0,0,12,11,10,9		
				;
				MOV.B	AH,@INPUT_EDGE00		;8,7,6,5,4,3,2,1
				JSR		@SIFT_REG01
				MOV.B	AH,@INPUT_EDGE01		;0,0,0,0,8,7,6,5
				;
				MOV.B	@INPUT_EDGE00,AL		;8,7,6,5,4,3,2,1
				AND.B	#B'00001111,AL
				MOV.B	AL,@INPUT_EDGE00		;0,0,0,0,4,3,2,1
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : AX
;*      RETURN  :  
;******************************************************************************
;
INPUT_CHANGE00:	.EQU	$
				MOV.B	AL,@INPUT_STATUS02		;16,15,14,13,12,11,10,9
				JSR		@SIFT_REG00
				MOV.B	AL,@INPUT_STATUS03		;0,0,0,0,16,15,14,13(解錠）
				;
				MOV.B	@INPUT_STATUS02,AL		;16,15,14,13,12,11,10,9
				AND.B	#B'00001111,AL
				MOV.B	AL,@INPUT_STATUS02		;0,0,0,0,12,11,10,9
				;
				MOV.B	AH,@INPUT_STATUS00
				JSR		@SIFT_REG01
				MOV.B	AH,@INPUT_STATUS01		
				;
				MOV.B	@INPUT_STATUS00,AL
				AND.B	#B'00001111,AL
				MOV.B	AL,@INPUT_STATUS00		
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
SIFT_REG00:		SHLR.B	AL
				SHLR.B	AL
				SHLR.B	AL
				SHLR.B	AL
				RTS
				;
SIFT_REG01:		SHLR.B	AH
				SHLR.B	AH
				SHLR.B	AH
				SHLR.B	AH
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
INPUT_CAP00:	.EQU	$
				MOV.B	@ER4,BL
				;
				CMP.B	#H'00,BL
				BNE		INPUT_CAP01
				BCLR	AH,AL
				RTS
INPUT_CAP01:	CMP.B	#H'FF,BL
				RETNZ
				BSET	AH,AL
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;										
BIT_CHK00:		.EQU	$
				MOV.B	@ER4,BL
				;
				BTST	AH,AL
				BEQ		BIT_CHK01
				SCF
				BRA		BIT_CHK02
BIT_CHK01:		CCF
BIT_CHK02:		ROTXL.B	BL
				MOV.B	BL,@ER4
				RTS					
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
LOAD_TXDATA:	MOV.B	AL,@ER6
				ADDS.L	#1,ER6
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
CARRY_ASCII00:	SHLR.B	AL
				BCS		CARRY_ASCII01		
				MOV.B	#"0",AH
				RTS
CARRY_ASCII01:	MOV.B	#"1",AH
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:ﾒｲﾝﾙｰﾁﾝ
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
U12_INPUT00:	JSR		@ADBIT5_CHK00
				JSR		@AD_INIT00
				BCLR    #0,@PDR5		;CS1
				JSR		@ADJST00
				JSR		@ADJST00
				MOV.B	@PDRB,AL
				MOV.B	AL,AH			;*******0
				;
				JSR		@ADBIT5_CHK00
				JSR		@AD_INIT07
				BCLR	#0,@PDR5		;CS1
				JSR		@ADJST00
				JSR		@ADJST00				
				MOV.B	@PDRB,AL		;0*******
				BSET	#0,@PDR5
				OR.B	AH,AL
				RTS
				;
U13_INPUT00:	JSR		@ADBIT5_CHK00
				JSR		@AD_INIT00
				BCLR    #1,@PDR5		;CS2
				JSR		@ADJST00
				JSR		@ADJST00
				MOV.B	@PDRB,AL
				MOV.B	AL,AH			;*******0
				;
				JSR		@ADBIT5_CHK00
				JSR		@AD_INIT07
				BCLR    #1,@PDR5		;CS2
				JSR		@ADJST00
				JSR		@ADJST00
				MOV.B	@PDRB,AL
				BSET	#1,@PDR5
				OR.B	AH,AL
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
ADBIT5_CHK00:	PUSH	AX
ADBIT5_CHK01:	MOV.B	@ADCSR,AL
				BTST	#5,AL
				BNE		ADBIT5_CHK01
				POP		AX
				RTS				
;******************************************************************************
;*      00-NAME :
;*      処理概要 :RS485 TRNSMIT
;*      ENTRY   :AH,ER4(EX)
;*      RETURN  :
;******************************************************************************
;
RS_TRANSMIT00:	JSR		@WAIT_TRANSMIT00
				JSR		@WAIT_TRANSMIT00
RS_TRANSMIT01:	JSR		@WAIT_TRANSMIT00
				JSR		@WAIT_TRANSMIT00
				JSR		@WAIT_TRANSMIT00
				BSET	#0,@PDR7				;TX ENABLE
				JSR		@WAIT_TRANSMIT00
				;
				JSR		@SEND_DATA00
				;
				JSR		@WAIT_TRANSMIT00		;1.2mSEC
				BCLR	#0,@PDR7				;TX_DSABLE
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要 :IP TRNSMIT
;*      ENTRY   :AH,ER4(EX)
;*      RETURN  :
;******************************************************************************
;
IP_TRANSMIT00:	JSR		@SEND_DATA00
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要 :IP TRNSMIT
;*      ENTRY   :AH,ER4(EX)
;*      RETURN  :
;******************************************************************************
;
SEND_DATA00:	MOV.L	#TX_DATA,ER4
				BSET	#5,@SCR3
				;
SEND_DATA01:	BTST	#7,@SSR
				BEQ		SEND_DATA01
				;
				MOV.B	@ER4,AH
				MOV.B	AH,@TDR
				;
SEND_DATA02:	BTST	#2,@SSR
				BEQ		SEND_DATA02
				;
				ADDS.L	#1,ER4
				DJNZ	CX,SEND_DATA01
				;
				BCLR	#5,@SCR3
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;								
LIFE_COUNT00:	BTST	#5,@PDR6
				BEQ		LIFE_COUNT01
				;
				MOV.W	#D'10,AX				;0.4 * 10 =   4SEC
				MOV.W	AX,@ENABLE_COUNT
				RTS
				;
LIFE_COUNT01:	MOV.W	#D'225,AX				;0.4 * 225 = 90SEC
				MOV.W	AX,@ENABLE_COUNT
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;								
LIFE_COUNT10:	MOV.B	@LIFE_TIME,AL
				BNE		LIFE_COUNT11
				;
				MOV.B	#D'05,AL				;ORG #D'03
LIFE_COUNT11:	MOV.B	AL,BL
				MOV.B	#H'00,AH
				MOV.B	#H'00,BH
				SHLL.W	AX
				SHLL.W	AX
				ADD.W	BX,AX
				SHLR.W	AX						;2.5倍
				MOV.W	AX,@ENABLE_COUNT
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;								
COUNT400_01:   	MOV.B   @FREE_COUNT,AL
				RETZ
                DEC.B   AL
                MOV.B   AL,@FREE_COUNT
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;								
COUNT400_00:   	MOV.W   @ENABLE_COUNT,AX
				RETZ
                DEC.W   #1,AX
                MOV.W   AX,@ENABLE_COUNT
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
ADJST00:		BRA     $+H'02
                BRA     $+H'02
                BRA     $+H'02
                BRA     $+H'02
                BRA     $+H'02
                BRA     $+H'02
                BRA     $+H'02
                BRA     $+H'02
                BRA     $+H'02
                BRA     $+H'02
                RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
WAIT_TRANSMIT00:	PUSH	CX
					MOV.W	#D'3000,CX				;-----1.5mSEC-----
WAIT_TRANSMIT01:	DJNZ	CX,WAIT_TRANSMIT01
					POP		CX
					RTS
					;
TIME_BIT00:     	PUSH    CX
                	MOV.W   #D'0235,CX              ;-----100uSEC-----
TIME_BIT01:     	DJNZ	CX,TIME_BIT01
                	POP     CX
                	RTS
					;
TIME_BIT100:     	PUSH    CX
                	MOV.W   #D'23500,CX              ;-----100muSEC-----
TIME_BIT101:     	JSR		@ADJST00
					DJNZ	CX,TIME_BIT101
                	POP     CX
                	RTS
					;
;******************************************************************************
;*      00-NAME :RING BUFFER
;*      処理概要:
;*      ENTRY   : AL    (DATA)
;*      RETURN  : AL    (DATA)
;******************************************************************************
;
WR_BUFFER00:    	.EQU    $
					PUSH.L	ER1
					MOV.L	#H'0000:32,ER1
                	MOV.W   @WR_POINT,R1
                	MOV.B   AL,@ER1
                	INC.L	#1,ER1
                	AND.W	#H'00FF:16,R1
                	OR.W	#H'FA00:16,R1
                	MOV.W   R1,@WR_POINT
					POP.L	ER1
                	RTS
                	;
RD_BUFFER00:    	.EQU    $
                	PUSH.L  ER1
					MOV.L	#H'0000:32,ER1
                	MOV.W   @RD_POINT,R1
                	MOV.B   @ER1+,AL
                	AND.W	#H'00FF:16,R1
                	OR.W	#H'FA00:16,R1
                	MOV.W   R1,@RD_POINT
                	POP.L	ER1
                	RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   :
;*      RETURN  :
;******************************************************************************
;
BUFF_COUNT00:	.EQU	$
				MOV.B	@RXD_COUNT,AL
				RETZ
				INC.B	AL
				MOV.B	AL,@RXD_COUNT
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
STX_CHK00:		CMP.B	#H'02,AL
				RETNZ
				MOV.B	@RXD_ETX,AH
				RETNZ
				JSR		@BUFF_CLR01
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
ENQ_CHK00:		CMP.B	#H'05,AL
				RETNZ
				MOV.B	@RXD_ETX,AH
				RETNZ
				MOV.B	AL,@RXD_ENQ
				MOV.B	AL,@RXD_COUNT
				JSR		@BUFF_CLR02
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   :
;*      RETURN  :
;******************************************************************************
;
ETX_CHK00:		.EQU	$
				MOV.B	@RXD_ETX,AH
				BEQ		ETX_CHK99
				;
				CMP.B	#H'03,AH
				RETZ
				;
				MOV.B	#H'00,AH
				MOV.B	AH,@RXD_ETX
				RTS
				;
ETX_CHK99:		CMP.B	#H'03,AL
				RETNZ
				MOV.B	AL,@RXD_ETX
				RTS
				;
				;
ETX_CHK01:		.EQU	$
				MOV.B	@RXD_ETX,AH
				BEQ		ETX_CHK99
				;
				CMP.B	#H'03,AH
				RETNZ
				MOV.B	#H'04,AH
				MOV.B	AH,@RXD_ETX
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
STX_READ00:		JSR		@RD_BUFFER00
				CMP.B	#H'02,AL
				RETZ	
				JSR		@RD_BUFFER00
				CMP.B	#H'02,AL
				RETZ
				JSR		@RD_BUFFER00
				CMP.B	#H'02,AL
				RETZ	
				;
				POP.W	AX
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;				
ENQ_READ00:		JSR		@RD_BUFFER00
				CMP.B	#H'05,AL
				RETZ	
				JSR		@RD_BUFFER00
				CMP.B	#H'05,AL
				RETZ
				JSR		@RD_BUFFER00
				CMP.B	#H'05,AL
				RETZ	
				;
				POP.W	AX
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;				
WAIT_SFA00:		.EQU	$
				JSR		@BUFF_CLR00
				;
WAIT_SFA01:		MOV.B	@RDR_2,AL
				CMP.B	#H'FA,AL
				RETZ
				MOV.B	@RXD_ENQ,AL
				CMP.B	#H'05,AL
				BNE		WAIT_SFA01
				;
				MOV.L   #FIX_DATA07,ER5		;FA
				MOV.L   #TX_DATA,ER6
				MOV.B   #D'30,R4L
				EEPMOV.B
				MOV.W	#D'30,CX
				JSR		@RS_TRANSMIT01
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : AX,BX
;*      RETURN  :  
;******************************************************************************
;				
REM_REC00:      .EQU    $
                MOV.W   @GRA_0:16,AX
                ;
                MOV.W   AX,BX
                SUB.W   #PULSE00:16,AX          ;ERR
                BCC     REM_REC99
                ;
                MOV.W   BX,AX
                SUB.W   #PULSE01:16,AX
                BCC     REM_REC99               ;LEDER
                ;
                MOV.W   BX,AX
                SUB.W   #PULSE02:16,AX
                BCC     REM_REC99               ;REPEAT
                ;
                MOV.W   BX,AX
                SUB.W   #PULSE03:16,AX
                BCC     REM_REC01               ;"1"
                ;
                CCF
                BRA     REM_REC02
REM_REC01:      SCF
REM_REC02:      MOV.W   @REM_NUM01,BX
                MOV.W   @REM_NUM03,AX
                ;
                ROTXR.W BX						;C >> MSB >> LSB
                ROTXR.W AX                        
                ;
                MOV.W   BX,@REM_NUM01
                MOV.W   AX,@REM_NUM03
                ;
                MOV.B   @BIT_COUNT,AL
                INC.B   AL
                MOV.B   AL,@BIT_COUNT                        
                CMP.B   #D'32,AL
				RETNZ
				;
REM_REC04:      JSR		@CODE_CHK00
REM_REC05:		JSR		@REM_SERCH00
				;
REM_REC99:      MOV.W   #H'0000,AX
                MOV.W   AX,@REM_NUM01
                MOV.W   AX,@REM_NUM03                        
                MOV.B   AL,@BIT_COUNT
                RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;	
REM_SERCH00:	MOV.W	#D'41,CX
				MOV.L   #REM_TABLE00,ER4
REM_SERCH01:	MOV.W   @ER4,AX
				CMP.W   BX,AX
				BEQ     REM_SERCH02
				ADDS.L	#2,ER4
				ADDS.L	#2,ER4
				DJNZ    CX,REM_SERCH01
				POP.W	AX						;ERR
				RTS
				;		
REM_SERCH02:	ADDS.L	#2,ER4
				MOV.W	@ER4,BX
				;
				MOV.B	@TXD_FLG,AL
				BTST	#4,AL
				RETNZ
				BSET	#4,AL
				MOV.B   AL,@TXD_FLG				;@REM_FLG00
				MOV.W	BX,@REM_CODE00
				RTS	
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;				
CODE_CHK00:		MOV.B	#H'00,AL
				MOV.B	AL,@BIT_COUNT
				;
				MOV.W	@REM_NUM03,AX			;8135 43BC
				CMP.W	#H'3581,AX			
				RETZ
				POP.W	AX
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
CARA_CHK00:		MOV.W	#D'16,CX
				MOV.L   #ASCII_TABLE00,ER4
CARA_CHK01:		MOV.B   @ER4,AH
				CMP.B   AL,AH
				RETZ						;OK
				ADDS.L	#1,ER4
				DJNZ    CX,CARA_CHK01
				POP.W	AX
				POP.W	AX					;ERR
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;				
BUFF_CLR00:		.EQU	$
				MOV.B	#H'00,AH
				MOV.B	AH,@RXD_ENQ
				MOV.B	AH,@RXD_COUNT
				;
BUFF_CLR01:		MOV.B	#H'00,AH
				MOV.B	AH,@RXD_ETX	
				;
BUFF_CLR02:		MOV.L	#BUFFRNG:32,ER1		;E1+BX
				MOV.W	R1,@RD_POINT
				MOV.W	R1,@WR_POINT
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
WR_RESET00:		MOV.L	#BUFFRNG:32,ER1		;E1+BX
				MOV.W	R1,@WR_POINT
				RTS
				;
RD_RESET00:		MOV.L	#BUFFRNG:32,ER1		;E1+BX
				MOV.W	R1,@RD_POINT
				RTS				
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
LIFE_CHK00:		MOV.W	@ENABLE_COUNT,AX
				RETZ
				CMP.W	#H'0001,AX
				RETNZ
				JSR		@OUTPUT_CLR01
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
OUTPUT_CLR00:	MOV.W	#H'FFFF,AX
				MOV.W	AX,@INPUT01
				MOV.W	AX,@INPUT03
				MOV.W	AX,@INPUT05
				MOV.W	AX,@INPUT07
				MOV.W	AX,@INPUT09
				MOV.W	AX,@INPUT11
				MOV.W	AX,@INPUT13
				;
				MOV.L	#H'0000,ER0			;E0+AX
				MOV.L	#H'0000,ER1			;E1+BX
				MOV.L	#H'0000,ER2			;E2+CX
				MOV.L	#H'0000,ER3			;E3+DX
				MOV.L	#H'0000,ER4			;E4+EX
				MOV.L	#H'0000,ER5			;E5+IY
				MOV.L	#H'0000,ER6			;E6+IX
				;
				MOV.W	AX,@INPUT15				;REMCON				
				MOV.W	AX,@NEW_INPUT00
				MOV.W	AX,@OLD_INPUT00
				MOV.B	AL,@RETRY_TIME00
				MOV.B	AL,@RETRY_TIME01			
				MOV.B	AL,@RETRY_COUNT00
				MOV.B	AL,@RETRY_COUNT01				
				;
				MOV.W	#H'0000,AX		
				MOV.W	AX,@OUTPUT01
				MOV.W	AX,@OUTPUT03
				MOV.W	AX,@OUTPUT05
				MOV.W	AX,@OUTPUT07
				MOV.W	AX,@OUTPUT09
				MOV.W	AX,@OUTPUT11
				MOV.W	AX,@OUTPUT13
				MOV.W	AX,@OUTPUT15
				MOV.B	AL,@TXD_FLG
				RTS
				;
				;
OUTPUT_CLR01:	MOV.W	#H'0000,AX	
				MOV.W	AX,@ENABLE_COUNT
				;	
				MOV.W	AX,@OUTPUT01
				MOV.W	AX,@OUTPUT03
				MOV.W	AX,@OUTPUT05
				MOV.W	AX,@OUTPUT07
				MOV.W	AX,@OUTPUT09
				MOV.W	AX,@OUTPUT11
				MOV.W	AX,@OUTPUT13
				;
				MOV.B	AL,@COMAND_Y		;参加禁止
				;
				JSR		@SOL_CONT00
				MOV.W	AX,@OUTPUT15		;SOL
				;
				JSR		@AGENT_RESET00
				;		
				JSR		@BUFF_CLR00		
				RTS	
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;				
AGENT_RESET00:	BTST	#7,@PDR6				;LAN - 485 切換
				RETNZ
				;
				BCLR	#2,@PDR1
				JSR		@TIME_BIT100
				BSET	#2,@PDR1				;ISP_RESET"H"
				;
				MOV.W	#D'225,AX				;90sec	
				MOV.W	AX,@ENABLE_COUNT
				RTS	
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;				
TEST00:			BTST	#4,@PDR6
				RETNZ
				;
				JSR		@TEST_REM00
				JSR		@TEST_TXD00
				JSR		@TEST_RXD00
				;
				JSR		@INPUT_READ00
				JSR		@DIP_TEST00
				MOV.B	@TXD_FLG,AL
				BEQ		TEST00
				;
				MOV.W	#D'08,CX
				MOV.B	@OLD_INPUT00,AL
				MOV.L	#OUTPUT01,ER4
				NOT.B	AL
TEST02:			JSR		@CARRY_ASCII00
				AND.B	#B'00000001,AH
				MOV.B	AH,@ER4
				ADDS.L	#1,ER4
				DJNZ	CX,TEST02
				;
				MOV.W	#D'06,CX
				MOV.B	@OLD_INPUT01,AL
				MOV.L	#OUTPUT09,ER4
				NOT.B	AL
TEST03:			JSR		@CARRY_ASCII00
				AND.B	#B'00000001,AH
				MOV.B	AH,@ER4
				ADDS.L	#1,ER4
				DJNZ	CX,TEST03
				;
				MOV.B	@TXD_FLG,AL
				BCLR	#0,AL
				MOV.B	AL,@TXD_FLG
				BRA		TEST00			
				;
				;
TEST_REM00:		MOV.B	@TXD_FLG,AL
				BTST	#4,AL
				RETZ
				BCLR	#4,AL
				MOV.B	AL,@TXD_FLG
				;
				MOV.L	#OUTPUT15,ER4
				MOV.W	@REM_CODE00,BX
				CMP.W	#"01",BX
				BEQ		TEST05
				MOV.B	#H'00,AL				;OUTPUT15
				MOV.B	AL,@ER4	
				RTS
				;
TEST05:			MOV.B	#H'01,AL				;OUTPUT15
				MOV.B	AL,@ER4	
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
DIP_TEST00:		BTST	#5,@PDR6
				RETNZ
				;
				JSR		@ADBIT5_CHK00
				JSR		@AD_INIT00
				BCLR    #2,@PDR5		;CS3 U11 TC74HC541AF
				JSR		@ADJST00
				JSR		@ADJST00
				MOV.B	@PDRB,AL
				MOV.B	AL,AH			;*******0
				;
				JSR		@ADBIT5_CHK00
				JSR		@AD_INIT07
				BCLR    #2,@PDR5
				JSR		@ADJST00
				JSR		@ADJST00				
				MOV.B	@PDRB,AL
				BSET	#2,@PDR5
				OR.B	AH,AL
				;
				MOV.B	AL,@OLD_INPUT00
				;
				MOV.B	@TXD_FLG,AL
				BSET	#0,AL
				MOV.B	AL,@TXD_FLG
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
TEST_TXD00:		MOV.L   #TEST_DATA00,ER5		;STX,0,0,T,E,S,T,ETX,LRC
				MOV.L   #TX_DATA,ER6
				MOV.B   #D'09,R4L
				EEPMOV.B
				MOV.W	#D'09,CX
				JSR		@DIP2_00
				JSR		@BUFF_CLR00
				JSR		@RS_TRANSMIT00
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
TEST_RXD00:		.EQU	$
				JSR		@TEST_CHK00
				JSR		@BUFF_CLR00
TEST_RXD01:		MOV.B	#D'5,AL
				MOV.B	AL,@FREE_COUNT
TEST_RXD02:		MOV.B	@FREE_COUNT,AL
				BNE		TEST_RXD02
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : NOTHING
;*      RETURN  : NOTHING
;******************************************************************************
;
TEST_CHK00:		MOV.W	#D'50000,BX
TEST_CHK01:		MOV.B	@RXD_ETX,AL
				;
				JSR		@DIP2_01
				;
				BEQ		TEST_CHK03		;RETNZ
				DJNZ	BX,TEST_CHK01
				RTS
				;
TEST_CHK03:		JSR		@STX_READ00
				;
				JSR		@ADR_CONV00
				JSR		@ADR_READ00		;DIP READ
				AND.B	#B'00111111,AL
				MOV.B	@RXD_ADR,AH
				JSR		@ADR_CANCEL00
				CMP.B	AH,AL
				RETNZ
				JSR		@RD_BUFFER00
				CMP.B	#"T",AL
				RETNZ
				JSR		@RD_BUFFER00
				CMP.B	#"E",AL
				RETNZ
				JSR		@RD_BUFFER00
				CMP.B	#"S",AL
				RETNZ
				JSR		@RD_BUFFER00
				CMP.B	#"T",AL
				RETNZ
				;
				JSR		@BUFF_CLR00
				POP		AX
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;				
ADR_CANCEL00:	BTST	#5,@PDR6
				RETNZ
				;
				MOV.B	AL,AH
				RTS
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;				
DIP2_00:		BTST	#7,@PDR6				;LAN - 485 切換
				RETNZ
				MOV.W	#D'08,CX
				JSR		@BUFF_CLR00
				JSR		@IP_TRANSMIT00
				POP.W	AX
				RTS
				;
DIP2_01:		BTST	#7,@PDR6				;LAN - 485 切換
				BEQ		DIP2_02
				CMP.B	#D'04,AL				;EIA MODE
				RTS
DIP2_02:		CMP.B	#D'03,AL				;LAN MODE
				RTS				
;******************************************************************************
;*      00-NAME :
;*      処理概要:
;*      ENTRY   : 
;*      RETURN  :  
;******************************************************************************
;
				.ALIGN  2
FIX_DATA00:		.SDATA		<H'02>"FFg00"
				.ALIGN	2
FIX_DATA01:		.SDATA		<H'02>"FFx00"<H'03><H'7B>
				;
				.ALIGN	2
FIX_DATA07:		.DATA.B		H'FA,H'FA,H'FA,H'FA,H'FA,H'FA,H'FA,H'FA,H'FA,H'FA
				.DATA.B		H'FA,H'FA,H'FA,H'FA,H'FA,H'FA,H'FA,H'FA,H'FA,H'FA
				.DATA.B		H'FA,H'FA,H'FA,H'FA,H'FA,H'FA,H'FA,H'FA,H'FA,H'FA
				;
				.ALIGN	2
AGENT_DATA00:	.SDATA		"l_ip"<H'0D><H'0A>
				;
				.ALIGN	2
AGENT_COMAND00:	.SDATA		"l_ip=192.168.100."
				.ALIGN	2
AGENT_COMAND01:	.SDATA		"save"<H'0D><H'0A>
				.ALIGN	2
AGENT_COMAND02:	.SDATA		"exit"<H'0D><H'0A>
				.ALIGN	2
AGENT_COMAND03:	.SDATA		"serial"<H'0D><H'0A>
				.ALIGN	2
AGENT_COMAND04:	.SDATA		"f_ip"<H'0D><H'0A>
				.ALIGN	2
AGENT_COMAND05:	.SDATA		"f_ip="
				.ALIGN	2
AGENT_COMAND06:	.SDATA		"timv"<H'0D><H'0A>
				.ALIGN	2
AGENT_COMAND07:	.SDATA		"timv=10"<H'0D><H'0A>
				;
				.ALIGN	2
AGENT_TEST99:	.SDATA		"0.0.0.0"
			
				;
				.ALIGN	2
AGENT_COMAND99:	.SDATA		<H'0D><H'0A>
				;	
				.ALIGN	2
TEST_DATA00:	.SDATA		<H'02>"00TEST"<H'03><H'15>
				;				
				.ALIGN	2
ASCII_TABLE00:	.DATA.B		"0"
				.DATA.B		"1"
				.DATA.B		"2"
				.DATA.B		"3"
				.DATA.B		"4"
				.DATA.B		"5"
				.DATA.B		"6"
				.DATA.B		"7"
				.DATA.B		"8"
				.DATA.B		"9"
				.DATA.B		"A"
				.DATA.B		"B"
				.DATA.B		"C"
				.DATA.B		"D"
				.DATA.B		"E"
				.DATA.B		"F"
				;
				.ALIGN	2
ASCII_TABLE01:	.DATA.B		"0",H'00
				.DATA.B		"1",H'01
				.DATA.B		"2",H'02
				.DATA.B		"3",H'03
				.DATA.B		"4",H'04
				.DATA.B		"5",H'05
				.DATA.B		"6",H'06
				.DATA.B		"7",H'07
				.DATA.B		"8",H'08
				.DATA.B		"9",H'09
				.DATA.B		"A",H'0A
				.DATA.B		"B",H'0B
				.DATA.B		"C",H'0C
				.DATA.B		"D",H'0D
				.DATA.B		"E",H'0E
				.DATA.B		"F",H'0F
				;
				.ALIGN	2
REM_TABLE00:	.DATA.W		H'FF00,"01"
				.DATA.W		H'FE01,"06"
				.DATA.W		H'FD02,"0B"
				.DATA.W		H'FC03,"10"
				.DATA.W		H'FB04,"02"
				.DATA.W		H'FA05,"07"
				.DATA.W		H'F906,"0C"
				.DATA.W		H'F807,"11"
				.DATA.W		H'F708,"03"
				.DATA.W		H'F609,"08"
				.DATA.W		H'F50A,"0D"
				.DATA.W		H'F40B,"12"
				.DATA.W		H'F30C,"04"
				.DATA.W		H'F20D,"09"
				.DATA.W		H'F10E,"0E"
				.DATA.W		H'F00F,"13"
				.DATA.W		H'EF10,"05"
				.DATA.W		H'EE11,"0A"
				.DATA.W		H'ED12,"0F"
				.DATA.W		H'EC13,"14"
				;
				.DATA.W		H'BF40,"15"
				.DATA.W		H'BE41,"1A"
				.DATA.W		H'BD42,"1F"
				.DATA.W		H'BC43,"24"
				.DATA.W		H'BB44,"16"
				.DATA.W		H'BA45,"1B"
				.DATA.W		H'B946,"20"
				.DATA.W		H'B847,"25"
				.DATA.W		H'B748,"17"
				.DATA.W		H'B649,"1C"
				.DATA.W		H'B54A,"21"
				.DATA.W		H'B44B,"26"
				.DATA.W		H'B34C,"18"
				.DATA.W		H'B24D,"1D"
				.DATA.W		H'B14E,"22"
				.DATA.W		H'B04F,"27"
				.DATA.W		H'AF50,"19"
				.DATA.W		H'AE51,"1E"
				.DATA.W		H'AD52,"23"
				.DATA.W		H'AC53,"28"
				.DATA.W		H'ACAC,"00"			;DAMY
				;
				.ALIGN	2
JUMP_TABLE00:	.DATA.W		"LI"				;L=DAMY
				.DATA.L		ANSER_I00
				.DATA.W		"LY"
				.DATA.L		ANSER_Y00
				.DATA.W		"LG"
				.DATA.L		ANSER_G00
				;
				.DATA.W		"RG"				;R=DAMY
				.DATA.L		STX_ANSER02
				.DATA.W		"RV"
				.DATA.L		STX_ANSER99
				.DATA.W		"RY"
				.DATA.L		ANSER_Y00
				;
				.DATA.W		"LP"
				.DATA.L		ANSER_P00
				.DATA.W		"LK"
				.DATA.L		ANSER_K00
;*****************************************************************************
;
;               ﾕｰｻﾞｰRAMﾜｰｸｴﾘｱ
;
;******************************************************************************
;
       .SECTION B,STACK,LOCATE=H'F780
;
WR_POINT:			.RES	2
RD_POINT:			.RES	2
;
TIMV_FLG:			.RES	1
FREE_RUN:			.RES	1
FREE_COUNT:			.RES	1
WAIT_COUNT:			.RES	1
ENABLE_COUNT:		.RES	2
;
RXD_ENQ:			.RES	1
RXD_ETX:			.RES	1
RXD_COUNT:			.RES	1
RXD_ADR:			.RES	1
;
PRISCALER:			.RES	1
READ_FLG:			.RES	1
;
NEW_INPUT00:		.RES	1
NEW_INPUT01:		.RES	1
OLD_INPUT00:		.RES	1
OLD_INPUT01:		.RES	1
;
INPUT01:			.RES	1			;1
INPUT02:			.RES	1			;2
INPUT03:			.RES	1			;3
INPUT04:			.RES	1			;4
INPUT05:			.RES	1			;5
INPUT06:			.RES	1			;6
INPUT07:			.RES	1			;7
INPUT08:			.RES	1			;8
INPUT09:			.RES	1			;9
INPUT10:			.RES	1			;10
INPUT11:			.RES	1			;11
INPUT12:			.RES	1			;12
INPUT13:			.RES	1			;13　解錠
INPUT14:			.RES	1			;14　開扉
;
INPUT15:			.RES	1			;REMCON
INPUT16:			.RES	1			;REMCON
;
OUTPUT99:			.RES	1			;DAMY
OUTPUT00:			.RES	1			;DAMY
OUTPUT01:			.RES	1
OUTPUT02:			.RES	1
OUTPUT03:			.RES	1
OUTPUT04:			.RES	1
OUTPUT05:			.RES	1
OUTPUT06:			.RES	1
OUTPUT07:			.RES	1
OUTPUT08:			.RES	1
OUTPUT09:			.RES	1
OUTPUT10:			.RES	1
OUTPUT11:			.RES	1
OUTPUT12:			.RES	1
OUTPUT13:			.RES	1
OUTPUT14:			.RES	1
OUTPUT15:			.RES	1			;SOL
OUTPUT16:			.RES	1			;NO
;
					.ALIGN	2
INPUT_EDGE00:		.RES	1
INPUT_EDGE01:		.RES	1
INPUT_EDGE02:		.RES	1
INPUT_EDGE03:		.RES	1
;
INPUT_STATUS00:		.RES	1
INPUT_STATUS01:		.RES	1
INPUT_STATUS02:		.RES	1
INPUT_STATUS03:		.RES	1
;
REM_FLG00:			.RES	1
BIT_COUNT:			.RES	1				
;
DIP_SW1:			.RES	1
DIP_SW2:			.RES	1
TXD_FLG:			.RES	1
TX_DATA:			.RES	30
;
RETRY_COUNT00:		.RES	1
RETRY_TIME00:		.RES	1
RETRY_COUNT01:		.RES	1
RETRY_TIME01:		.RES	1
;
TIMV:				.RES	1
COMAND_Y:			.RES	1
LIFE_TIME:			.RES	1
;
F_IP00:				.RES	1
F_IP01:				.RES	1
F_IP02:				.RES	1
F_IP03:				.RES	1
;
NEW_STATUS:			.RES	1
					.ALIGN	2
NEW_OUTPUT:			.RES	2
					.ALIGN	2
REM_CODE00:			.RES	1
REM_CODE01:			.RES	1
;
REM_NUM01:			.RES	1
REM_NUM02:			.RES	1
REM_NUM03:			.RES	1
REM_NUM04:			.RES	1
;
                		.ORG    H'FA00
;
BUFFRNG:        	.RES	255		;
BUFFEND:        	.EQU    $
;
						.ORG	H'FB00
;
OUT_MEM00:			.RES	64
OUT_MEM32:			.RES	64
OUT_MEM64:			.RES	64
OUT_MEM96:			.RES	64
;
						.ORG	H'FC00
;						
TEMP_AREA01:		.RES	1		;ADR
TEMP_AREA02:		.RES	1		;ADR
TEMP_AREA03:		.RES	1		;COMAND
TEMP_AREA04:		.RES	1		;OUT3.4
TEMP_AREA05:		.RES	1		;OUT1.2
TEMP_AREA06:		.RES	1		;OUT7.8
TEMP_AREA07:		.RES	1		;OUT5.6
TEMP_AREA08:		.RES	1		;OUT11.12
TEMP_AREA09:		.RES	1		;OUT9.10
TEMP_AREA10:		.RES	1		;OUT15.16
TEMP_AREA11:		.RES	1		;OUT13.14
TEMP_AREA12:		.RES	1		;ETX or "I"
TEMP_AREA13:		.RES	1
TEMP_AREA14:		.RES	1
TEMP_AREA15:		.RES	1		;SOL
TEMP_AREA16:		.RES	1		;NO
TEMP_AREA99:		.RES	250		;
;
					.ALIGN	2
READ_IP00:			.RES	16		;
;
;*********************************************************************
;
;       program end
;
;*********************************************************************
; 
 
		.end







